{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "qral-df-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_2b_Stage_NPPES_Test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_2_Stage_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_1_ld_cms_nppes",
								"type": "DatasetReference"
							},
							"name": "NPPESProviderMain"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "LoadNPPESMainStage2a"
						}
					],
					"transformations": [
						{
							"name": "AddtlColumns"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select9"
						}
					],
					"script": "source(output(\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{healthcare provider taxonomy code_1} as string,\n\t\t{provider license number_1} as string,\n\t\t{provider license number state code_1} as string,\n\t\t{healthcare provider primary taxonomy switch_1} as string,\n\t\t{healthcare provider taxonomy code_2} as string,\n\t\t{provider license number_2} as string,\n\t\t{provider license number state code_2} as string,\n\t\t{healthcare provider primary taxonomy switch_2} as string,\n\t\t{healthcare provider taxonomy code_3} as string,\n\t\t{provider license number_3} as string,\n\t\t{provider license number state code_3} as string,\n\t\t{healthcare provider primary taxonomy switch_3} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider taxonomy group_1} as string,\n\t\t{healthcare provider taxonomy group_2} as string,\n\t\t{healthcare provider taxonomy group_3} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from [nppes].[1_ld_cms_nppes] where npi = \\'1003003914\\'',\n\tformat: 'query') ~> NPPESProviderMain\nSelect4 derive(current_flag = '1',\n\t\t{provider business practice location address state name} = iif(upper({provider business practice location address state name})=='ALASKA','AK',\r\niif(upper({provider business practice location address state name})=='ALABAMA','AL',\r\niif(upper({provider business practice location address state name})=='ARKANSAS','AR',\r\niif(upper({provider business practice location address state name})=='AMERICAN SAMOA','AS',\r\niif(upper({provider business practice location address state name})=='ARIZONA','AZ',\r\niif(upper({provider business practice location address state name})=='CA- CALIFORNIA','CA',\r\niif(upper({provider business practice location address state name})=='CALIFORNIA','CA',\r\niif(upper({provider business practice location address state name})=='LOS ANGELES','CA',\r\niif(upper({provider business practice location address state name})=='COLORADO','CO',\r\niif(upper({provider business practice location address state name})=='CONNECTICUT','CT',\r\niif(upper({provider business practice location address state name})=='DISTRICT OF COLUMBIA','DC',\r\niif(upper({provider business practice location address state name})=='DELAWARE','DE',\r\niif(upper({provider business practice location address state name})=='FL - FLORIDA','FL',\r\niif(upper({provider business practice location address state name})=='FLA','FL',\r\niif(upper({provider business practice location address state name})=='FLORIDA','FL',\r\niif(upper({provider business practice location address state name})=='MICRONESIA, FEDERATED STATES OF','FM',\r\niif(upper({provider business practice location address state name})=='GEORGIA','GA',\r\niif(upper({provider business practice location address state name})=='GUAM','GU',\r\niif(upper({provider business practice location address state name})=='HAWAII','HI',\r\niif(upper({provider business practice location address state name})=='IOWA','IA',\r\niif(upper({provider business practice location address state name})=='IDAHO','ID',\r\niif(upper({provider business practice location address state name})=='IL - ILLINOIS','IL',\r\niif(upper({provider business practice location address state name})=='ILLINOIS','IL',\r\niif(upper({provider business practice location address state name})=='INDIANA','IN',\r\niif(upper({provider business practice location address state name})=='KANSAS','KS',\r\niif(upper({provider business practice location address state name})=='KENTUCKY','KY',\r\niif(upper({provider business practice location address state name})=='LOUISIANA','LA',\r\niif(upper({provider business practice location address state name})=='NEW ORLEANS','LA',\r\niif(upper({provider business practice location address state name})=='MA- MASSACHUSETTS','MA',\r\niif(upper({provider business practice location address state name})=='MASSACHUSETTS','MA',\r\niif(upper({provider business practice location address state name})=='MARYLAND','MD',\r\niif(upper({provider business practice location address state name})=='MAINE','ME',\r\niif(upper({provider business practice location address state name})=='MARSHALL ISLANDS','MH',\r\niif(upper({provider business practice location address state name})=='MICHIGAN','MI',\r\niif(upper({provider business practice location address state name})=='MINNESOTA','MN',\r\niif(upper({provider business practice location address state name})=='MISSOURI','MO',\r\niif(upper({provider business practice location address state name})=='MARIANA ISLANDS, NORTHERN','MP',\r\niif(upper({provider business practice location address state name})=='MISSISSIPPI','MS',\r\niif(upper({provider business practice location address state name})=='MS- MISSISSIPPI','MS',\r\niif(upper({provider business practice location address state name})=='MONTANA','MT',\r\niif(upper({provider business practice location address state name})=='N.C.','NC',\r\niif(upper({provider business practice location address state name})=='NC - NORTH CAROLINA','NC',\r\niif(upper({provider business practice location address state name})=='NORTH CAROLINA','NC',\r\niif(upper({provider business practice location address state name})=='NORTH CAROLINA (NC)','NC',\r\niif(upper({provider business practice location address state name})=='NORTH DAKOTA','ND',\r\niif(upper({provider business practice location address state name})=='NEBRASKA','NE',\r\niif(upper({provider business practice location address state name})=='NEW HAMPSHIRE','NH',\r\niif(upper({provider business practice location address state name})=='NEW JERSEY','NJ',\r\niif(upper({provider business practice location address state name})=='NJ - NEW JERSEY','NJ',\r\niif(upper({provider business practice location address state name})=='NEW MEXICO','NM',\r\niif(upper({provider business practice location address state name})=='NEVADA','NV',\r\niif(upper({provider business practice location address state name})=='N.Y.','NY',\r\niif(upper({provider business practice location address state name})=='NY - NEW YORK','NY',\r\niif(upper({provider business practice location address state name})=='NY- NEW YORK','NY',\r\niif(upper({provider business practice location address state name})=='OHIO','OH',\r\niif(upper({provider business practice location address state name})=='OHIO (OH)','OH',\r\niif(upper({provider business practice location address state name})=='OKLAHOMA','OK',\r\niif(upper({provider business practice location address state name})=='OR OREGON','OR',\r\niif(upper({provider business practice location address state name})=='OREGON','OR',\r\niif(upper({provider business practice location address state name})=='PENNSYLVANIA','PA',\r\niif(upper({provider business practice location address state name})=='P. R.','PR',\r\niif(upper({provider business practice location address state name})=='P.R','PR',\r\niif(upper({provider business practice location address state name})=='P.R.','PR',\r\niif(upper({provider business practice location address state name})=='P.R. PUERTO RICO','PR',\r\niif(upper({provider business practice location address state name})=='PR - PUERTO RICO','PR',\r\niif(upper({provider business practice location address state name})=='PUERTO RICO','PR',\r\niif(upper({provider business practice location address state name})=='PUERTORICO','PR',\r\niif(upper({provider business practice location address state name})=='RHODE ISLAND','RI',\r\niif(upper({provider business practice location address state name})=='SOUTH CAROLINA','SC',\r\niif(upper({provider business practice location address state name})=='SOUTH DAKOTA','SD',\r\niif(upper({provider business practice location address state name})=='TENNESSEE','TN',\r\niif(upper({provider business practice location address state name})=='TEXAS','TX',\r\niif(upper({provider business practice location address state name})=='TX-TEXAS','TX',\r\niif(upper({provider business practice location address state name})=='U.T.','UT',\r\niif(upper({provider business practice location address state name})=='UTAH','UT',\r\niif(upper({provider business practice location address state name})=='VIRGINIA','VA',\r\niif(upper({provider business practice location address state name})=='VIRGIN ISLANDS','VI',\r\niif(upper({provider business practice location address state name})=='VERMONT','VT',\r\niif(upper({provider business practice location address state name})=='WASHINGTON','WA',\r\niif(upper({provider business practice location address state name})=='WISCONSIN','WI',\r\niif(upper({provider business practice location address state name})=='WEST VIRGINIA','WV',\r\niif(upper({provider business practice location address state name})=='WYOMING','WY',\r\n{provider business practice location address state name}\r\n)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),\n\t\t{provider business mailing address state name} = iif(upper({provider business mailing address state name})=='ALASKA','AK',\r\niif(upper({provider business mailing address state name})=='ALABAMA','AL',\r\niif(upper({provider business mailing address state name})=='ARKANSAS','AR',\r\niif(upper({provider business mailing address state name})=='AMERICAN SAMOA','AS',\r\niif(upper({provider business mailing address state name})=='ARIZONA','AZ',\r\niif(upper({provider business mailing address state name})=='CA- CALIFORNIA','CA',\r\niif(upper({provider business mailing address state name})=='CALIFORNIA','CA',\r\niif(upper({provider business mailing address state name})=='LOS ANGELES','CA',\r\niif(upper({provider business mailing address state name})=='COLORADO','CO',\r\niif(upper({provider business mailing address state name})=='CONNECTICUT','CT',\r\niif(upper({provider business mailing address state name})=='DISTRICT OF COLUMBIA','DC',\r\niif(upper({provider business mailing address state name})=='DELAWARE','DE',\r\niif(upper({provider business mailing address state name})=='FL - FLORIDA','FL',\r\niif(upper({provider business mailing address state name})=='FLA','FL',\r\niif(upper({provider business mailing address state name})=='FLORIDA','FL',\r\niif(upper({provider business mailing address state name})=='MIRCONESIA, FEDERATED STATES OF','FM',\r\niif(upper({provider business mailing address state name})=='GEORGIA','GA',\r\niif(upper({provider business mailing address state name})=='GUAM','GU',\r\niif(upper({provider business mailing address state name})=='HAWAII','HI',\r\niif(upper({provider business mailing address state name})=='IOWA','IA',\r\niif(upper({provider business mailing address state name})=='IDAHO','ID',\r\niif(upper({provider business mailing address state name})=='IL - ILLINOIS','IL',\r\niif(upper({provider business mailing address state name})=='ILLINOIS','IL',\r\niif(upper({provider business mailing address state name})=='INDIANA','IN',\r\niif(upper({provider business mailing address state name})=='KANSAS','KS',\r\niif(upper({provider business mailing address state name})=='KENTUCKY','KY',\r\niif(upper({provider business mailing address state name})=='LOUISIANA','LA',\r\niif(upper({provider business mailing address state name})=='NEW ORLEANS','LA',\r\niif(upper({provider business mailing address state name})=='MA- MASSACHUSETTS','MA',\r\niif(upper({provider business mailing address state name})=='MASSACHUSETTS','MA',\r\niif(upper({provider business mailing address state name})=='MARYLAND','MD',\r\niif(upper({provider business mailing address state name})=='MAINE','ME',\r\niif(upper({provider business mailing address state name})=='MARSHALL ISLANDS','MH',\r\niif(upper({provider business mailing address state name})=='MICHIGAN','MI',\r\niif(upper({provider business mailing address state name})=='MINNESOTA','MN',\r\niif(upper({provider business mailing address state name})=='MISSOURI','MO',\r\niif(upper({provider business mailing address state name})=='MARIANA ISLANDS, NORTHERN','MP',\r\niif(upper({provider business mailing address state name})=='MISSISSIPPI','MS',\r\niif(upper({provider business mailing address state name})=='MS- MISSISSIPPI','MS',\r\niif(upper({provider business mailing address state name})=='MONTANA','MT',\r\niif(upper({provider business mailing address state name})=='N.C.','NC',\r\niif(upper({provider business mailing address state name})=='NC- NORTH CAROLINA','NC',\r\niif(upper({provider business mailing address state name})=='NORTH CAROLINA','NC',\r\niif(upper({provider business mailing address state name})=='NORTH CAROLINA (NC)','NC',\r\niif(upper({provider business mailing address state name})=='NORTH DAKOTA','ND',\r\niif(upper({provider business mailing address state name})=='NEBRASKA','NE',\r\niif(upper({provider business mailing address state name})=='NEW HAMPSHIRE','NH',\r\niif(upper({provider business mailing address state name})=='NEW JERSEY','NJ',\r\niif(upper({provider business mailing address state name})=='NJ - NEW JERSEY','NJ',\r\niif(upper({provider business mailing address state name})=='NEW MEXICO','NM',\r\niif(upper({provider business mailing address state name})=='NEVADA','NV',\r\niif(upper({provider business mailing address state name})=='N.Y.','NY',\r\niif(upper({provider business mailing address state name})=='NY - NEW YORK','NY',\r\niif(upper({provider business mailing address state name})=='NY- NEW YORK','NY',\r\niif(upper({provider business mailing address state name})=='NEW YORK','NY',\r\niif(upper({provider business mailing address state name})=='OHIO','OH',\r\niif(upper({provider business mailing address state name})=='OKLAHOMA','OK',\r\niif(upper({provider business mailing address state name})=='OR OREGON','OR',\r\niif(upper({provider business mailing address state name})=='OREGON','OR',\r\niif(upper({provider business mailing address state name})=='PENNSYLVANIA','PA',\r\niif(upper({provider business mailing address state name})=='P. R.','PR',\r\niif(upper({provider business mailing address state name})=='P.R','PR',\r\niif(upper({provider business mailing address state name})=='P.R.','PR',\r\niif(upper({provider business mailing address state name})=='P.R. PUERTO RICO','PR',\r\niif(upper({provider business mailing address state name})=='PR - PUERTO RICO','PR',\r\niif(upper({provider business mailing address state name})=='PUERTO RICO','PR',\r\niif(upper({provider business mailing address state name})=='PUERTORICO','PR',\r\niif(upper({provider business mailing address state name})=='PALAU','PW',\r\niif(upper({provider business mailing address state name})=='RHODE ISLAND','RI',\r\niif(upper({provider business mailing address state name})=='SOUTH CAROLINA','SC',\r\niif(upper({provider business mailing address state name})=='SOUTH DAKOTA','SD',\r\niif(upper({provider business mailing address state name})=='TENNESSEE','TN',\r\niif(upper({provider business mailing address state name})=='TEXAS','TX',\r\niif(upper({provider business mailing address state name})=='TX-TEXAS','TX',\r\niif(upper({provider business mailing address state name})=='U.T','UT',\r\niif(upper({provider business mailing address state name})=='UTAH','UT',\r\niif(upper({provider business mailing address state name})=='VIRGINIA','VA',\r\niif(upper({provider business mailing address state name})=='VIRGIN ISLANDS','VI',\r\niif(upper({provider business mailing address state name})=='VERMONT','VT',\r\niif(upper({provider business mailing address state name})=='WASHINGTON','WA',\r\niif(upper({provider business mailing address state name})=='WISCONSIN','WI',\r\niif(upper({provider business mailing address state name})=='WEST VIRGINIA','WV',\r\niif(upper({provider business mailing address state name})=='WYOMING','WY',\r\n{provider business mailing address state name}\r\n)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ~> AddtlColumns\nSelect9 select(mapColumn(\n\t\teach(match(upper(name)!='TEMP_NPI'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nNPPESProviderMain select(mapColumn(\n\t\teach(match(!startsWith(upper(name),'HEALTHCARE PROVIDER TAXONOMY CODE_')&&!startsWith(upper(name),'PROVIDER LICENSE NUMBER_')&&!startsWith(upper(name),'PROVIDER LICENSE NUMBER STATE CODE_')&&!startsWith(upper(name),'HEALTHCARE PROVIDER PRIMARY TAXONOMY SWITCH_')&&!startsWith(upper(name),'HEALTHCARE PROVIDER TAXONOMY GROUP_')))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select9\nAddtlColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> LoadNPPESMainStage2a"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_3_Stage_NPPES_Main')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_2_Stage_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_2_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesMain"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_MAIN",
								"type": "DatasetReference"
							},
							"name": "ProdCmsNppesMain"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_3_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "SinkNPPESMain"
						}
					],
					"transformations": [
						{
							"name": "ProdNPPESMainCurrent"
						},
						{
							"name": "SelectProdNPPESMainCurrent"
						},
						{
							"name": "DropBadFieldName"
						},
						{
							"name": "RemoveSpaceMailingCountryFieldName"
						},
						{
							"name": "NewNPPESMainRecord"
						},
						{
							"name": "Union1"
						},
						{
							"name": "NewNPPESRecordsNPI"
						},
						{
							"name": "CompareWithProdNPPESMain"
						},
						{
							"name": "AdjustCurrentFlag"
						},
						{
							"name": "DropNPITemp"
						},
						{
							"name": "ProdCreateKey"
						},
						{
							"name": "StCreateKey"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tcurrent_flag as string,\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCmsNppesMain\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.)} as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{active flag} as string,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProdCmsNppesMain\nProdCmsNppesMain filter(current_flag=='1') ~> ProdNPPESMainCurrent\nProdNPPESMainCurrent select(mapColumn(\n\t\teach(match(!in([('current_flag'),('data_month')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProdNPPESMainCurrent\nRemoveSpaceMailingCountryFieldName select(mapColumn(\n\t\teach(match(!in([('provider business mailing address country code (if outside u.s.) ')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropBadFieldName\nStCmsNppesMain derive({provider business mailing address country code (if outside u.s.)} = {provider business mailing address country code (if outside u.s.) }) ~> RemoveSpaceMailingCountryFieldName\nStCreateKey, ProdCreateKey exists(st_compare_key == prod_compare_key,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewNPPESMainRecord\nSelect1, DropNPITemp union(byName: true)~> Union1\nNewNPPESMainRecord aggregate(groupBy(npi_temp = npi),\n\ttemp = count(npi)) ~> NewNPPESRecordsNPI\nNewNPPESRecordsNPI, ProdCmsNppesMain join(npi_temp == npi,\n\tjoinType:'right',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> CompareWithProdNPPESMain\nCompareWithProdNPPESMain derive(current_flag = iif(isNull(npi_temp),current_flag,'0')) ~> AdjustCurrentFlag\nAdjustCurrentFlag select(mapColumn(\n\t\teach(match(!in([('npi_temp'),('temp'),('st_compare_key')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropNPITemp\nSelectProdNPPESMainCurrent derive(prod_compare_key = upper(concat(npi,iifNull({entity type code},\"\"),iifNull({replacement npi},''),iifNull({employer identification number (ein)},''),iifNull({provider organization name (legal business name)},''),\r\niifNull({provider last name (legal name)},''),iifNull({provider first name},''),iifNull({provider middle name},''),iifNull({provider name prefix text},''),\r\niifNull({provider name suffix text},''),iifNull({provider credential text},''),iifNull({provider other organization name},''),\r\niifNull({provider other organization name type code},''),iifNull({provider other last name},''),iifNull({provider other first name},''),\r\niifNull({provider other middle name},''),iifNull({provider other name prefix text},''),iifNull({provider other name suffix text},''),\r\niifNull({provider other credential text},''),iifNull({provider other last name type code},''),iifNull({provider first line business mailing address},''),\r\niifNull({provider second line business mailing address},''),iifNull({provider business mailing address city name},''),iifNull({provider business mailing address state name},''),\r\niifNull({provider business mailing address postal code},''),iifNull({provider business mailing address country code (if outside u.s.)},''),\r\niifNull({provider business mailing address telephone number},''),iifNull({provider business mailing address fax number},''),\r\niifNull({provider first line business practice location address},''),iifNull({provider second line business practice location address},''),\r\niifNull({provider business practice location address city name},''),iifNull({provider business practice location address state name},''),\r\niifNull({provider business practice location address postal code},''),iifNull({provider business practice location address country code out us},''),\r\niifNull({provider business practice location address telephone number},''),iifNull({provider business practice location address fax number},''),\r\niifNull(toString({provider enumeration date}),''),iifNull(toString({last update date}),''),iifNull({npi deactivation reason code},''),\r\niifNull(toString({npi deactivation date}),''),iifNull(toString({npi reactivation date}),''),iifNull({active flag},''),iifNull({provider gender code},''),\r\niifNull({authorized official last name},''),iifNull({authorized official first name},''),iifNull({authorized official middle name},''),\r\niifNull({authorized official title or position},''),iifNull({authorized official telephone number},''),iifNull({healthcare provider primary taxonomy code},''),\r\niifNull(primary_taxonomy_grouping,''),iifNull(primary_taxonomy_classification,''),iifNull(primary_taxonomy_specialization,''),iifNull({provider primary license number},''),\r\niifNull({provider primary license number state code},''),iifNull({healthcare provider primary group taxonomy},''),iifNull({is sole proprietor},''),\r\niifNull({is organization subpart},''),iifNull({parent organization lbn},''),iifNull({parent organization tin},''),iifNull({authorized official name prefix text},''),\r\niifNull({authorized official name suffix text},''),iifNull({authorized official credential text},'')))) ~> ProdCreateKey\nDropBadFieldName derive(st_compare_key = upper(concat(npi,iifNull({entity type code},\"\"),iifNull({replacement npi},''),iifNull({employer identification number (ein)},''),iifNull({provider organization name (legal business name)},''),\r\niifNull({provider last name (legal name)},''),iifNull({provider first name},''),iifNull({provider middle name},''),iifNull({provider name prefix text},''),\r\niifNull({provider name suffix text},''),iifNull({provider credential text},''),iifNull({provider other organization name},''),\r\niifNull({provider other organization name type code},''),iifNull({provider other last name},''),iifNull({provider other first name},''),\r\niifNull({provider other middle name},''),iifNull({provider other name prefix text},''),iifNull({provider other name suffix text},''),\r\niifNull({provider other credential text},''),iifNull({provider other last name type code},''),iifNull({provider first line business mailing address},''),\r\niifNull({provider second line business mailing address},''),iifNull({provider business mailing address city name},''),iifNull({provider business mailing address state name},''),\r\niifNull({provider business mailing address postal code},''),iifNull({provider business mailing address country code (if outside u.s.)},''),\r\niifNull({provider business mailing address telephone number},''),iifNull({provider business mailing address fax number},''),\r\niifNull({provider first line business practice location address},''),iifNull({provider second line business practice location address},''),\r\niifNull({provider business practice location address city name},''),iifNull({provider business practice location address state name},''),\r\niifNull({provider business practice location address postal code},''),iifNull({provider business practice location address country code out us},''),\r\niifNull({provider business practice location address telephone number},''),iifNull({provider business practice location address fax number},''),\r\niifNull(toString({provider enumeration date}),''),iifNull(toString({last update date}),''),iifNull({npi deactivation reason code},''),\r\niifNull(toString({npi deactivation date}),''),iifNull(toString({npi reactivation date}),''),iifNull({active flag},''),iifNull({provider gender code},''),\r\niifNull({authorized official last name},''),iifNull({authorized official first name},''),iifNull({authorized official middle name},''),\r\niifNull({authorized official title or position},''),iifNull({authorized official telephone number},''),iifNull({healthcare provider primary taxonomy code},''),\r\niifNull(primary_taxonomy_grouping,''),iifNull(primary_taxonomy_classification,''),iifNull(primary_taxonomy_specialization,''),iifNull({provider primary license number},''),\r\niifNull({provider primary license number state code},''),iifNull({healthcare provider primary group taxonomy},''),iifNull({is sole proprietor},''),\r\niifNull({is organization subpart},''),iifNull({parent organization lbn},''),iifNull({parent organization tin},''),iifNull({authorized official name prefix text},''),\r\niifNull({authorized official name suffix text},''),iifNull({authorized official credential text},'')))) ~> StCreateKey\nNewNPPESMainRecord select(mapColumn(\n\t\teach(match(!in([('st_compare_key')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcurrent_flag as string,\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string,\n\t\t{provider business mailing address country code (if outside u.s.)} as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkNPPESMain"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_3_Stage_NPPES_Other_Provider_Identifier')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_2_Stage_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_2_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesMain"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_OTHER_PROVIDER_ID",
								"type": "DatasetReference"
							},
							"name": "ProdCmsNppesOtherProviderID"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_2b_st_cms_nppes_other_provider_identifier",
								"type": "DatasetReference"
							},
							"name": "StCMSNPPESOtherProvID"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_3_st_cms_nppes_other_provider_id",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestNewNPIID"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestBothNewIDOnly"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestBothOldOnly"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestAggrError"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestOldActive"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestOldOtherProvData"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestCompareKeyWithMain"
						}
					],
					"transformations": [
						{
							"name": "ProdNPPESOtherProvIDCurrent"
						},
						{
							"name": "StNPPESMainActive"
						},
						{
							"name": "StCmsNppesUniqueActiveNPI"
						},
						{
							"name": "StNPPESMainActiveNPI"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "ProdNPPESCurrentNPI"
						},
						{
							"name": "Select2"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "NewNPIProviderOtherIDFinal"
						},
						{
							"name": "StCMSNPPESOtherProvIDFixColumnName"
						},
						{
							"name": "NPIInBothNewData"
						},
						{
							"name": "NPIInBothNewDataFinal"
						},
						{
							"name": "NPIInBothOldData"
						},
						{
							"name": "NPIInBothOldDataFinal"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SetOldDataToActiveFlag0"
						},
						{
							"name": "SetOldDataToCurrentFlag0"
						},
						{
							"name": "NPIOldDataActiveFlag0Final"
						},
						{
							"name": "NPIOldDataCurrentFlag0Final"
						},
						{
							"name": "NewChangeDataFinal"
						},
						{
							"name": "Select6"
						},
						{
							"name": "KeepOldDataFinal"
						},
						{
							"name": "FinalData"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Select8"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Select9"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Join3"
						},
						{
							"name": "InBothStOtherProvID"
						},
						{
							"name": "Join4"
						},
						{
							"name": "DataMonthTemp"
						},
						{
							"name": "DataMonth"
						},
						{
							"name": "AppendDataMonth"
						}
					],
					"script": "source(output(\n\t\tcurrent_flag as string,\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCmsNppesMain\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tother_provider_identifier as string,\n\t\tother_provider_identifier_type_code as string,\n\t\tother_provider_identifier_state as string,\n\t\tother_provider_identifier_issuer as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProdCmsNppesOtherProviderID\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\t{other provider identifier} as string,\n\t\t{other provider identifier state} as string,\n\t\t{other provider identifier issuer} as string,\n\t\t{other provider identifier type code} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCMSNPPESOtherProvID\nProdCmsNppesOtherProviderID filter(current_flag=='1') ~> ProdNPPESOtherProvIDCurrent\nStCmsNppesMain filter({active flag}=='1') ~> StNPPESMainActive\nStNPPESMainActive aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> StCmsNppesUniqueActiveNPI\nStCmsNppesUniqueActiveNPI select(mapColumn(\n\t\teach(match(in([('npi')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StNPPESMainActiveNPI\nStCMSNPPESOtherProvIDFixColumnName aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> Aggregate2\nAggregate2 select(mapColumn(\n\t\ttemp_npi = npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, Select2 join(temp_npi == npi_prod,\n\tjoinType:'outer',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nProdNPPESOtherProvIDCurrent aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> ProdNPPESCurrentNPI\nProdNPPESCurrentNPI select(mapColumn(\n\t\tnpi_prod = npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nJoin1 split(isNull(npi_prod),\n\ttemp_npi==npi_prod,\n\tdisjoint: false) ~> ConditionalSplit1@(NewNPI, InBoth, OldNPI)\nConditionalSplit1@NewNPI select(mapColumn(\n\t\ttemp_npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nConditionalSplit1@InBoth select(mapColumn(\n\t\ttemp_npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nConditionalSplit1@OldNPI select(mapColumn(\n\t\ttemp_npi = npi_prod\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nJoin2 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NewNPIProviderOtherIDFinal\nStCMSNPPESOtherProvID select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier = {other provider identifier},\n\t\tother_provider_identifier_issuer = {other provider identifier issuer},\n\t\tother_provider_identifier_state = {other provider identifier state},\n\t\tother_provider_identifier_type_code = {other provider identifier type code}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StCMSNPPESOtherProvIDFixColumnName\nSelect8, DerivedColumn2 exists(Compare_key_StOther == Compare_key_ProdOther,\n\tnegate:true,\n\tbroadcast: 'auto')~> NPIInBothNewData\nNPIInBothNewData select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIInBothNewDataFinal\nDerivedColumn2, DerivedColumn3 exists(Compare_key_ProdOther == Compare_key_StOther,\n\tnegate:true,\n\tbroadcast: 'auto')~> NPIInBothOldData\nDerivedColumn1 select(mapColumn(\n\t\tnpi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_type_code,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_issuer\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIInBothOldDataFinal\nNPIInBothOldData derive(current_flag = '0') ~> DerivedColumn1\nSelect5, StNPPESMainActiveNPI exists(temp_npi == npi,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nJoin4 filter({active flag}=='1') ~> Filter1\nAppendDataMonth derive({active flag} = '0',\n\t\tdata_month = data_month_temp) ~> SetOldDataToActiveFlag0\nFilter1 derive(current_flag = '0') ~> SetOldDataToCurrentFlag0\nSetOldDataToActiveFlag0 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIOldDataActiveFlag0Final\nSetOldDataToCurrentFlag0 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIOldDataCurrentFlag0Final\nNewNPIProviderOtherIDFinal, NPIInBothNewDataFinal, NPIInBothOldDataFinal, NPIOldDataActiveFlag0Final, NPIOldDataCurrentFlag0Final union(byName: true)~> NewChangeDataFinal\nDerivedColumn5 select(mapColumn(\n\t\teach(match(name!='current_flag'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nDerivedColumn4, Select6 exists(Prod_Compare_Key == OldData_CompareKey,\n\tnegate:true,\n\tbroadcast: 'auto')~> KeepOldDataFinal\nSelect9, NewChangeDataFinal union(byName: true)~> FinalData\nJoin3 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_type_code,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_issuer\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nDerivedColumn3 select(mapColumn(\n\t\ttemp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code,\n\t\tCompare_key_StOther\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nSelect7 derive(Compare_key_ProdOther = upper(concat(npi,iifNull({entity type code},''),iifNull({active flag},''),iifNull(other_provider_identifier,''),iifNull(other_provider_identifier_type_code,''),\r\niifNull(other_provider_identifier_state,''),iifNull(other_provider_identifier_issuer,'')))) ~> DerivedColumn2\nInBothStOtherProvID derive(Compare_key_StOther = upper(concat(npi,iifNull({entity type code},''),iifNull({active flag},''),iifNull(other_provider_identifier,''),iifNull(other_provider_identifier_type_code,''),\r\niifNull(other_provider_identifier_state,''),iifNull(other_provider_identifier_issuer,'')))) ~> DerivedColumn3\nProdCmsNppesOtherProviderID derive(Prod_Compare_Key = upper(concat(npi,iifNull(toString(data_month),''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(other_provider_identifier,''),iifNull(other_provider_identifier_type_code,''),\r\niifNull(other_provider_identifier_state,''),iifNull(other_provider_identifier_issuer,'')))) ~> DerivedColumn4\nNewChangeDataFinal derive(OldData_CompareKey = upper(concat(npi,iifNull(toString(data_month),''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(other_provider_identifier,''),iifNull(other_provider_identifier_type_code,''), iifNull(other_provider_identifier_state,''),iifNull(other_provider_identifier_issuer,'')))) ~> DerivedColumn5\nKeepOldDataFinal select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_type_code,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_issuer\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select9\nSelect3, StCMSNPPESOtherProvIDFixColumnName join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join2\nSelect4, ProdNPPESOtherProvIDCurrent join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join3\nSelect4, StCMSNPPESOtherProvIDFixColumnName join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> InBothStOtherProvID\nExists1, ProdNPPESOtherProvIDCurrent join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join4\nStCMSNPPESOtherProvID aggregate(groupBy(data_month,\n\t\t{active flag}),\n\ttemp = count(data_month)) ~> DataMonthTemp\nDataMonthTemp select(mapColumn(\n\t\tdata_month_temp = data_month,\n\t\t{active flag}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DataMonth\nFilter1, DataMonth join(ProdCmsNppesOtherProviderID@{active flag} == DataMonth@{active flag},\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> AppendDataMonth\nFinalData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tother_provider_identifier as string,\n\t\tother_provider_identifier_type_code as string,\n\t\tother_provider_identifier_state as string,\n\t\tother_provider_identifier_issuer as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nJoin2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestNewNPIID\nNPIInBothNewData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestBothNewIDOnly\nNPIInBothOldData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestBothOldOnly\nStNPPESMainActiveNPI sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestAggrError\nExists1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestOldActive\nJoin4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestOldOtherProvData\nKeepOldDataFinal sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestCompareKeyWithMain"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_3_Stage_NPPES_Provider_Taxonomy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_2_Stage_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_2_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesMain"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_PROVIDER_TAXONOMY",
								"type": "DatasetReference"
							},
							"name": "ProdCmsNppesProvTaxonomy"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_2b_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "StCMSNPPESProvTaxonomy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_3_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestAggrError"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestCompareKey"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestBothOldOnly"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestBothNewIDOnly"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestOldProvTaxonomy"
						},
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "TestOldActive"
						}
					],
					"transformations": [
						{
							"name": "ProdNPPESProvTaxonomyCurrent"
						},
						{
							"name": "StNPPESMainActive"
						},
						{
							"name": "StCmsNPPESMainActiveNPI"
						},
						{
							"name": "StNPPESMainActiveNPI"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "ProdCmsNppesCurrentNPI"
						},
						{
							"name": "Select2"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "Lookup"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "NewNPIProvTaxonomyFinal"
						},
						{
							"name": "InBothStOtherProvID"
						},
						{
							"name": "InBothProdOtherProvID"
						},
						{
							"name": "StCMSNPPESProvTaxonomySelect"
						},
						{
							"name": "NPIInBothNewData"
						},
						{
							"name": "NPIInBothNewDataFinal"
						},
						{
							"name": "NPIInBothOldData"
						},
						{
							"name": "NPIInBothOldDataFinal"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SetOldDataToActiveFlag0"
						},
						{
							"name": "SetOldDataToCurrentFlag0"
						},
						{
							"name": "NPIOldDataActiveFlag0Final"
						},
						{
							"name": "NPIOldDataCurrentFlag0Final"
						},
						{
							"name": "NewChangeDataFinal"
						},
						{
							"name": "Select6"
						},
						{
							"name": "KeepOldDataFinal"
						},
						{
							"name": "FinalData"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Select8"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Select9"
						},
						{
							"name": "DataMonthTemp"
						},
						{
							"name": "DataMonth"
						},
						{
							"name": "Join4"
						},
						{
							"name": "AppendDataMonth"
						}
					],
					"script": "source(output(\n\t\tcurrent_flag as string,\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCmsNppesMain\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_group_taxonomy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProdCmsNppesProvTaxonomy\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tposition as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\thealthcare_provider_group_taxonomy as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCMSNPPESProvTaxonomy\nProdCmsNppesProvTaxonomy filter(current_flag=='1') ~> ProdNPPESProvTaxonomyCurrent\nStCmsNppesMain filter({active flag}=='1') ~> StNPPESMainActive\nStNPPESMainActive aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> StCmsNPPESMainActiveNPI\nStCmsNPPESMainActiveNPI select(mapColumn(\n\t\teach(match(in([('npi')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StNPPESMainActiveNPI\nStCMSNPPESProvTaxonomySelect aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> Aggregate2\nAggregate2 select(mapColumn(\n\t\ttemp_npi = npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, Select2 join(temp_npi == npi_prod,\n\tjoinType:'outer',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nProdNPPESProvTaxonomyCurrent aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> ProdCmsNppesCurrentNPI\nProdCmsNppesCurrentNPI select(mapColumn(\n\t\tnpi_prod = npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nJoin1 split(isNull(npi_prod),\n\ttemp_npi==npi_prod,\n\tdisjoint: false) ~> ConditionalSplit1@(NewNPI, InBoth, OldNPI)\nSelect3, StCMSNPPESProvTaxonomySelect lookup(temp_npi == npi,\n\tmultiple: true,\n\tbroadcast: 'auto')~> Lookup\nConditionalSplit1@NewNPI select(mapColumn(\n\t\ttemp_npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nConditionalSplit1@InBoth select(mapColumn(\n\t\ttemp_npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nConditionalSplit1@OldNPI select(mapColumn(\n\t\ttemp_npi = npi_prod\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nLookup select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NewNPIProvTaxonomyFinal\nSelect4, StCMSNPPESProvTaxonomySelect lookup(temp_npi == npi,\n\tmultiple: true,\n\tbroadcast: 'auto')~> InBothStOtherProvID\nSelect4, ProdNPPESProvTaxonomyCurrent lookup(temp_npi == npi,\n\tmultiple: true,\n\tbroadcast: 'auto')~> InBothProdOtherProvID\nStCMSNPPESProvTaxonomy select(mapColumn(\n\t\teach(match(upper(name)!='POSITION'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StCMSNPPESProvTaxonomySelect\nSelect8, DerivedColumn2 exists(Compare_key_ProdProvTaxonomy == Compare_key_StProvTaxonomy,\n\tnegate:true,\n\tbroadcast: 'auto')~> NPIInBothNewData\nNPIInBothNewData select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIInBothNewDataFinal\nSelect7, DerivedColumn3 exists(Compare_key_StProvTaxonomy == Compare_key_ProdProvTaxonomy,\n\tnegate:true,\n\tbroadcast: 'auto')~> NPIInBothOldData\nDerivedColumn1 select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_taxonomy_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_group_taxonomy\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIInBothOldDataFinal\nNPIInBothOldData derive(current_flag = '0') ~> DerivedColumn1\nSelect5, StNPPESMainActiveNPI exists(temp_npi == npi,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nJoin4 filter({active flag}=='1') ~> Filter1\nAppendDataMonth derive({active flag} = '0',\n\t\tdata_month = data_month_temp) ~> SetOldDataToActiveFlag0\nFilter1 derive(current_flag = '0') ~> SetOldDataToCurrentFlag0\nSetOldDataToActiveFlag0 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIOldDataActiveFlag0Final\nSetOldDataToCurrentFlag0 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIOldDataCurrentFlag0Final\nNewNPIProvTaxonomyFinal, NPIInBothNewDataFinal, NPIInBothOldDataFinal, NPIOldDataActiveFlag0Final, NPIOldDataCurrentFlag0Final union(byName: true)~> NewChangeDataFinal\nDerivedColumn5 select(mapColumn(\n\t\teach(match(name!='current_flag'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nDerivedColumn4, Select6 exists(Prod_Compare_Key == OldData_CompareKey,\n\tnegate:true,\n\tbroadcast: 'auto')~> KeepOldDataFinal\nSelect9, NewChangeDataFinal union(byName: true)~> FinalData\nDerivedColumn2 select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_taxonomy_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_group_taxonomy,\n\t\tCompare_key_StProvTaxonomy\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nDerivedColumn3 select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization,\n\t\tCompare_key_ProdProvTaxonomy\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nInBothProdOtherProvID derive(Compare_key_StProvTaxonomy = upper(concat(iifNull(npi,''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(healthcare_provider_taxonomy_code,''),iifNull(taxonomy_grouping,''),\r\niifNull(taxonomy_classification,''),iifNull(taxonomy_specialization,''),iifNull(provider_license_number,''),iifNull(provider_license_number_state_code,''),\r\niifNull(healthcare_provider_primary_taxonomy_switch,''),iifNull(healthcare_provider_group_taxonomy,'')))) ~> DerivedColumn2\nInBothStOtherProvID derive(Compare_key_ProdProvTaxonomy = upper(concat(iifNull(npi,''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(healthcare_provider_taxonomy_code,''),iifNull(taxonomy_grouping,''),\r\niifNull(taxonomy_classification,''),iifNull(taxonomy_specialization,''),iifNull(provider_license_number,''),iifNull(provider_license_number_state_code,''),\r\niifNull(healthcare_provider_primary_taxonomy_switch,''),iifNull(healthcare_provider_group_taxonomy,'')))) ~> DerivedColumn3\nProdCmsNppesProvTaxonomy derive(Prod_Compare_Key = upper(concat(iifNull(toString(data_month),''),iifNull(npi,''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(healthcare_provider_taxonomy_code,''),\r\niifNull(taxonomy_grouping,''),iifNull(taxonomy_classification,''),iifNull(taxonomy_specialization,''),iifNull(provider_license_number,''),\r\niifNull(provider_license_number_state_code,''),iifNull(healthcare_provider_primary_taxonomy_switch,''),iifNull(healthcare_provider_group_taxonomy,'')))) ~> DerivedColumn4\nNewChangeDataFinal derive(OldData_CompareKey = upper(concat(iifNull(toString(data_month),''),iifNull(npi,''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(healthcare_provider_taxonomy_code,''),\r\niifNull(taxonomy_grouping,''),iifNull(taxonomy_classification,''),iifNull(taxonomy_specialization,''),iifNull(provider_license_number,''),\r\niifNull(provider_license_number_state_code,''),iifNull(healthcare_provider_primary_taxonomy_switch,''),iifNull(healthcare_provider_group_taxonomy,'')))) ~> DerivedColumn5\nKeepOldDataFinal select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_taxonomy_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_group_taxonomy\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select9\nStCMSNPPESProvTaxonomy aggregate(groupBy(data_month,\n\t\t{active flag}),\n\ttemp = count(data_month)) ~> DataMonthTemp\nDataMonthTemp select(mapColumn(\n\t\tdata_month_temp = data_month,\n\t\t{active flag}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DataMonth\nExists1, ProdNPPESProvTaxonomyCurrent join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join4\nFilter1, DataMonth join(ProdCmsNppesProvTaxonomy@{active flag} == DataMonth@{active flag},\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> AppendDataMonth\nFinalData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_group_taxonomy as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nStNPPESMainActiveNPI sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestAggrError\nKeepOldDataFinal sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestCompareKey\nNPIInBothOldData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestBothOldOnly\nNPIInBothNewData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestBothNewIDOnly\nJoin4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestOldProvTaxonomy\nExists1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TestOldActive"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_4_MtP_NPPES_Main')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_3_Move_to_Prod_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_3_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesMain3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_MAIN",
								"type": "DatasetReference"
							},
							"name": "ProdNPPESMain"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          current_flag as string,",
						"          npi as string,",
						"          data_month as integer,",
						"          {active flag} as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {replacement npi} as string,",
						"          {employer identification number (ein)} as string,",
						"          {provider organization name (legal business name)} as string,",
						"          {provider last name (legal name)} as string,",
						"          {provider first name} as string,",
						"          {provider middle name} as string,",
						"          {provider name prefix text} as string,",
						"          {provider name suffix text} as string,",
						"          {provider credential text} as string,",
						"          {provider other organization name} as string,",
						"          {provider other organization name type code} as string,",
						"          {provider other last name} as string,",
						"          {provider other first name} as string,",
						"          {provider other middle name} as string,",
						"          {provider other name prefix text} as string,",
						"          {provider other name suffix text} as string,",
						"          {provider other credential text} as string,",
						"          {provider other last name type code} as string,",
						"          {provider first line business mailing address} as string,",
						"          {provider second line business mailing address} as string,",
						"          {provider business mailing address city name} as string,",
						"          {provider business mailing address state name} as string,",
						"          {provider business mailing address postal code} as string,",
						"          {provider business mailing address telephone number} as string,",
						"          {provider business mailing address fax number} as string,",
						"          {provider first line business practice location address} as string,",
						"          {provider second line business practice location address} as string,",
						"          {provider business practice location address city name} as string,",
						"          {provider business practice location address state name} as string,",
						"          {provider business practice location address postal code} as string,",
						"          {provider business practice location address country code out us} as string,",
						"          {provider business practice location address telephone number} as string,",
						"          {provider business practice location address fax number} as string,",
						"          {provider enumeration date} as date,",
						"          {last update date} as date,",
						"          {npi deactivation reason code} as string,",
						"          {npi deactivation date} as date,",
						"          {npi reactivation date} as date,",
						"          {provider gender code} as string,",
						"          {authorized official last name} as string,",
						"          {authorized official first name} as string,",
						"          {authorized official middle name} as string,",
						"          {authorized official title or position} as string,",
						"          {authorized official telephone number} as string,",
						"          {is sole proprietor} as string,",
						"          {is organization subpart} as string,",
						"          {parent organization lbn} as string,",
						"          {parent organization tin} as string,",
						"          {authorized official name prefix text} as string,",
						"          {authorized official name suffix text} as string,",
						"          {authorized official credential text} as string,",
						"          {healthcare provider primary taxonomy code} as string,",
						"          {healthcare provider primary group taxonomy} as string,",
						"          {provider primary license number} as string,",
						"          {provider primary license number state code} as string,",
						"          primary_taxonomy_grouping as string,",
						"          primary_taxonomy_classification as string,",
						"          primary_taxonomy_specialization as string,",
						"          {provider business mailing address country code (if outside u.s.)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StCmsNppesMain3",
						"StCmsNppesMain3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          current_flag as string,",
						"          data_month as integer,",
						"          npi as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {replacement npi} as string,",
						"          {employer identification number (ein)} as string,",
						"          {provider organization name (legal business name)} as string,",
						"          {provider last name (legal name)} as string,",
						"          {provider first name} as string,",
						"          {provider middle name} as string,",
						"          {provider name prefix text} as string,",
						"          {provider name suffix text} as string,",
						"          {provider credential text} as string,",
						"          {provider other organization name} as string,",
						"          {provider other organization name type code} as string,",
						"          {provider other last name} as string,",
						"          {provider other first name} as string,",
						"          {provider other middle name} as string,",
						"          {provider other name prefix text} as string,",
						"          {provider other name suffix text} as string,",
						"          {provider other credential text} as string,",
						"          {provider other last name type code} as string,",
						"          {provider first line business mailing address} as string,",
						"          {provider second line business mailing address} as string,",
						"          {provider business mailing address city name} as string,",
						"          {provider business mailing address state name} as string,",
						"          {provider business mailing address postal code} as string,",
						"          {provider business mailing address country code (if outside u.s.)} as string,",
						"          {provider business mailing address telephone number} as string,",
						"          {provider business mailing address fax number} as string,",
						"          {provider first line business practice location address} as string,",
						"          {provider second line business practice location address} as string,",
						"          {provider business practice location address city name} as string,",
						"          {provider business practice location address state name} as string,",
						"          {provider business practice location address postal code} as string,",
						"          {provider business practice location address country code out us} as string,",
						"          {provider business practice location address telephone number} as string,",
						"          {provider business practice location address fax number} as string,",
						"          {provider enumeration date} as date,",
						"          {last update date} as date,",
						"          {npi deactivation reason code} as string,",
						"          {npi deactivation date} as date,",
						"          {npi reactivation date} as date,",
						"          {active flag} as string,",
						"          {provider gender code} as string,",
						"          {authorized official last name} as string,",
						"          {authorized official first name} as string,",
						"          {authorized official middle name} as string,",
						"          {authorized official title or position} as string,",
						"          {authorized official telephone number} as string,",
						"          {healthcare provider primary taxonomy code} as string,",
						"          primary_taxonomy_grouping as string,",
						"          primary_taxonomy_classification as string,",
						"          primary_taxonomy_specialization as string,",
						"          {provider primary license number} as string,",
						"          {provider primary license number state code} as string,",
						"          {healthcare provider primary group taxonomy} as string,",
						"          {is sole proprietor} as string,",
						"          {is organization subpart} as string,",
						"          {parent organization lbn} as string,",
						"          {parent organization tin} as string,",
						"          {authorized official name prefix text} as string,",
						"          {authorized official name suffix text} as string,",
						"          {authorized official credential text} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ProdNPPESMain"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_4_MtP_NPPES_Other_Provider_Identifier')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_3_Move_to_Prod_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_3_st_cms_nppes_other_provider_id",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesOtherProviderID3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_OTHER_PROVIDER_ID",
								"type": "DatasetReference"
							},
							"name": "ProdNPPESOtherProviderIdentifier"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          current_flag as string,",
						"          data_month as integer,",
						"          npi as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {active flag} as string,",
						"          other_provider_identifier as string,",
						"          other_provider_identifier_type_code as string,",
						"          other_provider_identifier_state as string,",
						"          other_provider_identifier_issuer as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StCmsNppesOtherProviderID3",
						"StCmsNppesOtherProviderID3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          current_flag as string,",
						"          data_month as integer,",
						"          npi as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {active flag} as string,",
						"          other_provider_identifier as string,",
						"          other_provider_identifier_type_code as string,",
						"          other_provider_identifier_state as string,",
						"          other_provider_identifier_issuer as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ProdNPPESOtherProviderIdentifier"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_4_MtP_NPPES_Provider_Taxonomy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_3_Move_to_Prod_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_3_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesProviderTaxonomy3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_PROVIDER_TAXONOMY",
								"type": "DatasetReference"
							},
							"name": "ProdNPPESProviderTaxonomy"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          current_flag as string,",
						"          data_month as integer,",
						"          npi as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {active flag} as string,",
						"          healthcare_provider_taxonomy_code as string,",
						"          taxonomy_grouping as string,",
						"          taxonomy_classification as string,",
						"          taxonomy_specialization as string,",
						"          provider_license_number as string,",
						"          provider_license_number_state_code as string,",
						"          healthcare_provider_primary_taxonomy_switch as string,",
						"          healthcare_provider_group_taxonomy as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StCmsNppesProviderTaxonomy3",
						"StCmsNppesProviderTaxonomy3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          current_flag as string,",
						"          data_month as integer,",
						"          npi as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {active flag} as string,",
						"          healthcare_provider_taxonomy_code as string,",
						"          taxonomy_grouping as string,",
						"          taxonomy_classification as string,",
						"          taxonomy_specialization as string,",
						"          provider_license_number as string,",
						"          provider_license_number_state_code as string,",
						"          healthcare_provider_primary_taxonomy_switch as string,",
						"          healthcare_provider_group_taxonomy as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ProdNPPESProviderTaxonomy"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RUN_QC_SQL_AM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "AM_test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "QCTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_QC_Exception_Detail",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "TestQuery"
						},
						{
							"name": "Select1"
						}
					],
					"script": "parameters{\n\tsql_query as string,\n\tqc_id as integer,\n\tpipeline_name as string,\n\tpkey_column as string,\n\tfinal_sql_query as string,\n\tcolumn_metric_name as string,\n\talert_type as string,\n\tpipeline_run_id as string,\n\tpipeline_trigger_time as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: ($final_sql_query),\n\tformat: 'query') ~> QCTable\nQCTable derive(qc_id = $qc_id,\n\t\tsql_query = $final_sql_query,\n\t\tpipeline_name = $pipeline_name,\n\t\tpipeline_run_id = $pipeline_run_id,\n\t\tpipeline_trigger_time = toTimestamp('$pipeline_trigger_time','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),\n\t\talert_type = $alert_type) ~> TestQuery\nTestQuery select(mapColumn(\n\t\tqc_id,\n\t\tsql_query,\n\t\tpipeline_name,\n\t\tpipeline_run_id,\n\t\tpipeline_trigger_time,\n\t\talert_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tqc_id as integer,\n\t\tpipeline_name as string,\n\t\tpipeline_run_id as string,\n\t\tpipeline_trigger_time as timestamp,\n\t\tpkey_column_values as string,\n\t\tcolumn_metric_error_values as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DA_Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_temp",
								"type": "DatasetReference"
							},
							"name": "Redshift"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_2b_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "Azure"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Exists2"
						}
					],
					"script": "source(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_group_taxonomy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Redshift\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tposition as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\thealthcare_provider_group_taxonomy as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Azure\nAzure, Redshift exists(Azure@npi == Redshift@npi,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists2\nExists2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DA_Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_temp_a",
								"type": "DatasetReference"
							},
							"name": "tempa"
						},
						{
							"dataset": {
								"referenceName": "PUF_temp_b",
								"type": "DatasetReference"
							},
							"name": "tempb"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						}
					],
					"script": "source(output(\n\t\ttemp_int as integer,\n\t\ttemp_var as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> tempa\nsource(output(\n\t\ttemp_int_b as integer,\n\t\ttemp_var_b as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> tempb\ntempa, tempb join(temp_int == temp_int_b,\n\tjoinType:'outer',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_to_stage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "AM_test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "landingTableSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_azure_sql_dev",
								"type": "DatasetReference"
							},
							"name": "writeDataToStage"
						}
					],
					"transformations": [
						{
							"name": "addLoaddate"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> landingTableSource\nlandingTableSource derive(load_date = currentTimestamp(),\n\t\tcurrent_flag = 1) ~> addLoaddate\naddLoaddate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> writeDataToStage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_Other_Provider_Identifier')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_2_Stage_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_2_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesMain"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_OTHER_PROVIDER_ID",
								"type": "DatasetReference"
							},
							"name": "ProdCmsNppesOtherProviderID"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_2b_st_cms_nppes_other_provider_identifier",
								"type": "DatasetReference"
							},
							"name": "StCMSNPPESOtherProvID"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ProdNPPESOtherProvIDCurrent"
						},
						{
							"name": "StNPPESMainActive"
						},
						{
							"name": "ActiveNPI"
						},
						{
							"name": "StNPPESMainActiveNPI"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "Select2"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "NewNPIProviderOtherIDFinal"
						},
						{
							"name": "StCMSNPPESOtherProvIDFixColumnName"
						},
						{
							"name": "NPIInBothNewData"
						},
						{
							"name": "NPIInBothNewDataFinal"
						},
						{
							"name": "NPIInBothOldData"
						},
						{
							"name": "NPIInBothOldDataFinal"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SetOldDataToActiveFlag0"
						},
						{
							"name": "SetOldDataToCurrentFlag0"
						},
						{
							"name": "NPIOldDataActiveFlag0Final"
						},
						{
							"name": "NPIOldDataCurrentFlag0Final"
						},
						{
							"name": "NewChangeDataFinal"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Select8"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Join3"
						},
						{
							"name": "InBothStOtherProvID"
						},
						{
							"name": "Join4"
						},
						{
							"name": "DataMonthTemp"
						},
						{
							"name": "DataMonth"
						},
						{
							"name": "AppendDataMonth"
						}
					],
					"script": "source(output(\n\t\tcurrent_flag as string,\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCmsNppesMain\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tother_provider_identifier as string,\n\t\tother_provider_identifier_type_code as string,\n\t\tother_provider_identifier_state as string,\n\t\tother_provider_identifier_issuer as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProdCmsNppesOtherProviderID\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\t{other provider identifier} as string,\n\t\t{other provider identifier state} as string,\n\t\t{other provider identifier issuer} as string,\n\t\t{other provider identifier type code} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCMSNPPESOtherProvID\nProdCmsNppesOtherProviderID filter(current_flag=='1') ~> ProdNPPESOtherProvIDCurrent\nStCmsNppesMain filter({active flag}=='1') ~> StNPPESMainActive\nStNPPESMainActive aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> ActiveNPI\nActiveNPI select(mapColumn(\n\t\teach(match(in([('npi')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StNPPESMainActiveNPI\nStCMSNPPESOtherProvIDFixColumnName aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> Aggregate2\nAggregate2 select(mapColumn(\n\t\ttemp_npi = npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, Select2 join(temp_npi == npi_prod,\n\tjoinType:'outer',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nProdNPPESOtherProvIDCurrent aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> Aggregate3\nAggregate3 select(mapColumn(\n\t\tnpi_prod = npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nJoin1 split(isNull(npi_prod),\n\ttemp_npi==npi_prod,\n\tdisjoint: false) ~> ConditionalSplit1@(NewNPI, InBoth, OldNPI)\nConditionalSplit1@NewNPI select(mapColumn(\n\t\ttemp_npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nConditionalSplit1@InBoth select(mapColumn(\n\t\ttemp_npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nConditionalSplit1@OldNPI select(mapColumn(\n\t\ttemp_npi = npi_prod\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nJoin2 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NewNPIProviderOtherIDFinal\nStCMSNPPESOtherProvID select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier = {other provider identifier},\n\t\tother_provider_identifier_issuer = {other provider identifier issuer},\n\t\tother_provider_identifier_state = {other provider identifier state},\n\t\tother_provider_identifier_type_code = {other provider identifier type code}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StCMSNPPESOtherProvIDFixColumnName\nSelect8, DerivedColumn2 exists(Compare_key_StOther == Compare_key_ProdOther,\n\tnegate:true,\n\tbroadcast: 'auto')~> NPIInBothNewData\nNPIInBothNewData select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIInBothNewDataFinal\nDerivedColumn2, DerivedColumn3 exists(Compare_key_ProdOther == Compare_key_StOther,\n\tnegate:true,\n\tbroadcast: 'auto')~> NPIInBothOldData\nDerivedColumn1 select(mapColumn(\n\t\tnpi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_type_code,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_issuer\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIInBothOldDataFinal\nNPIInBothOldData derive(current_flag = '0') ~> DerivedColumn1\nSelect5, StNPPESMainActiveNPI exists(temp_npi == npi,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nJoin4 filter({active flag}=='1') ~> Filter1\nAppendDataMonth derive({active flag} = '0',\n\t\tdata_month = data_month_temp) ~> SetOldDataToActiveFlag0\nFilter1 derive(current_flag = '0') ~> SetOldDataToCurrentFlag0\nSetOldDataToActiveFlag0 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIOldDataActiveFlag0Final\nSetOldDataToCurrentFlag0 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIOldDataCurrentFlag0Final\nNewNPIProviderOtherIDFinal, NPIInBothNewDataFinal, NPIInBothOldDataFinal, NPIOldDataActiveFlag0Final, NPIOldDataCurrentFlag0Final union(byName: true)~> NewChangeDataFinal\nDerivedColumn5 select(mapColumn(\n\t\teach(match(name!='current_flag'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin3 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_type_code,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_issuer\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nDerivedColumn3 select(mapColumn(\n\t\ttemp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code,\n\t\tCompare_key_StOther\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nSelect7 derive(Compare_key_ProdOther = upper(concat(npi,iifNull({entity type code},''),iifNull({active flag},''),iifNull(other_provider_identifier,''),iifNull(other_provider_identifier_type_code,''),\r\niifNull(other_provider_identifier_state,''),iifNull(other_provider_identifier_issuer,'')))) ~> DerivedColumn2\nInBothStOtherProvID derive(Compare_key_StOther = upper(concat(npi,iifNull({entity type code},''),iifNull({active flag},''),iifNull(other_provider_identifier,''),iifNull(other_provider_identifier_type_code,''),\r\niifNull(other_provider_identifier_state,''),iifNull(other_provider_identifier_issuer,'')))) ~> DerivedColumn3\nNewChangeDataFinal derive(OldData_CompareKey = upper(concat(npi,iifNull(toString(data_month),''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(other_provider_identifier,''),iifNull(other_provider_identifier_type_code,''), iifNull(other_provider_identifier_state,''),iifNull(other_provider_identifier_issuer,'')))) ~> DerivedColumn5\nSelect3, StCMSNPPESOtherProvIDFixColumnName join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join2\nSelect4, ProdNPPESOtherProvIDCurrent join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join3\nSelect4, StCMSNPPESOtherProvIDFixColumnName join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> InBothStOtherProvID\nExists1, StCMSNPPESOtherProvIDFixColumnName join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join4\nStCMSNPPESOtherProvID aggregate(groupBy(data_month,\n\t\t{active flag}),\n\ttemp = count(data_month)) ~> DataMonthTemp\nDataMonthTemp select(mapColumn(\n\t\tdata_month_temp = data_month,\n\t\t{active flag}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DataMonth\nFilter1, DataMonth join(StCMSNPPESOtherProvIDFixColumnName@{active flag} == DataMonth@{active flag},\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> AppendDataMonth\nSelect6 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AM_Execute_DQM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Readin_QC_List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "BLOB_XLS_TEST_SQL_LOOP_AM",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_List').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run_QC_SQL",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "AM_TEST_Execute_SQL_Query",
											"type": "DataFlowReference",
											"parameters": {
												"sql_query": {
													"value": "'@{item().query}'",
													"type": "Expression"
												},
												"qc_id": {
													"value": "@item().query_number",
													"type": "Expression"
												},
												"pipeline_name": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"pkey_column": {
													"value": "'@{'code'}'",
													"type": "Expression"
												},
												"table_name": {
													"value": "'@{item().table_name}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"QCTable": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"sink1": {},
												"sink2": {
													"schemaName": "nucc",
													"tableName": "qc_summary"
												},
												"sink3": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@concat('qc_rejects_',item().table_name)",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime-TEST2",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AM_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DA_Test_Loop_SQL_Query')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_List').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run_QC_SQL",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DA_TEST_1_QC_Exception_Detail",
											"type": "DataFlowReference",
											"parameters": {
												"sql_query": {
													"value": "'@{item().query}'",
													"type": "Expression"
												},
												"qc_id": {
													"value": "@item().query_number",
													"type": "Expression"
												},
												"pipeline_name": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"pkey_column": {
													"value": "'@{item().pkey_column}'",
													"type": "Expression"
												},
												"final_sql_query": "\"SELECT CONCAT({$pkey_column},'') as pkey_column_values, CONCAT({$column_metric_name},'|') as column_metric_error_values {$sql_query}\"",
												"column_metric_name": {
													"value": "'@{item().column_metric_name}'",
													"type": "Expression"
												},
												"alert_type": {
													"value": "'@{item().alert_code}'",
													"type": "Expression"
												},
												"pipeline_run_id": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"pipeline_trigger_time": {
													"value": "'@{pipeline().TriggerTime}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"QCTable": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime-TEST2",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Readin_QC_List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "BLOB_XLS_TEST_SQL_LOOP",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_1_DQM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_List').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run_QC_SQL",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DA_TEST_1_QC_Exception_Detail",
											"type": "DataFlowReference",
											"parameters": {
												"sql_query": {
													"value": "'@{item().sql_query}'",
													"type": "Expression"
												},
												"qc_id": {
													"value": "@item().qc_id",
													"type": "Expression"
												},
												"pipeline_name": {
													"value": "'@{pipeline()?.TriggeredByPipelineName}'",
													"type": "Expression"
												},
												"pkey_column": {
													"value": "'@{item().pkey_column_names}'",
													"type": "Expression"
												},
												"final_sql_query": "\"SELECT CONCAT({$pkey_column},'') as pkey_column_values, CONCAT({$column_metric_name},'|') as column_metric_error_values {$sql_query}\"",
												"column_metric_name": {
													"value": "'@{item().column_metric_name}'",
													"type": "Expression"
												},
												"alert_type": {
													"value": "'@{item().alert_code}'",
													"type": "Expression"
												},
												"pipeline_run_id": {
													"value": "'@{pipeline()?.TriggeredByPipelineRunId}'",
													"type": "Expression"
												},
												"pipeline_trigger_time": {
													"value": "'@{convertFromUtc(pipeline().TriggerTime,'Central Standard Time', 'yyyy-MM-dd HH:mm:ss.fff')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"QCTable": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime-TEST2",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Readin_QC_List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * FROM dqm.v_qc_list WHERE active_flag = 1 AND pipeline_name = ''',pipeline()?.TriggeredByPipelineName,'''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PUF_V_QC_List",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_1_DQM_AM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_List').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "RUN_QC_SQL_AM",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "RUN_QC_SQL_AM",
											"type": "DataFlowReference",
											"parameters": {
												"sql_query": {
													"value": "'@{item().sql_query}'",
													"type": "Expression"
												},
												"qc_id": {
													"value": "@item().qc_id",
													"type": "Expression"
												},
												"pipeline_name": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"pkey_column": {
													"value": "'@{item().pkey_column_names}'",
													"type": "Expression"
												},
												"final_sql_query": "\"SELECT CONCAT({$pkey_column},'') as pkey_column_values, CONCAT({$column_metric_name},'|') as column_metric_error_values {$sql_query}\"",
												"column_metric_name": {
													"value": "'@{item().column_metric_name}'",
													"type": "Expression"
												},
												"alert_type": {
													"value": "'@{item().alert_code}'",
													"type": "Expression"
												},
												"pipeline_run_id": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"pipeline_trigger_time": {
													"value": "'@{pipeline().TriggerTime}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"QCTable": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Readin_QC_List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PUF_V_QC_List",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AM_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/RUN_QC_SQL_AM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_2_DQM_Alert_Action')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_Tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run_QC_Alert_Action",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DA_TEST_2_QC_Alert_Action",
											"type": "DataFlowReference",
											"parameters": {
												"pipeline_run_id": {
													"value": "'@{pipeline()?.TriggeredByPipelineRunId}'",
													"type": "Expression"
												},
												"sql_query": "\"SELECT *, CONCAT({$pkey_column},'') as pkey_column_values FROM {$input_SchemaName}.{$input_TableName}\"",
												"input_SchemaName": {
													"value": "'@{item().table_schema}'",
													"type": "Expression"
												},
												"input_TableName": {
													"value": "'@{item().table_name}'",
													"type": "Expression"
												},
												"pkey_column": {
													"value": "'@{item().pkey_column_names}'",
													"type": "Expression"
												},
												"pipeline_trigger_time": {
													"value": "'@{convertFromUtc(pipeline().TriggerTime,'Central Standard Time', 'yyyy-MM-dd HH:mm:ss.fff')}'",
													"type": "Expression"
												},
												"pipeline_name": {
													"value": "'@{pipeline()?.TriggeredByPipelineName}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"InputTable": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"QCExceptionDetail": {},
												"sink1": {
													"schemaName": "@item().table_schema",
													"tableName": {
														"value": "@concat('temp_',item().table_name)",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime1-Test4-16cores",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Readin_QC_Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT table_schema, table_name, pkey_column_names FROM dqm.v_qc_list WHERE pipeline_name = ''',pipeline()?.TriggeredByPipelineName,''' GROUP BY table_schema, table_name, pkey_column_names')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PUF_V_QC_List",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_L_to_S')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Copy_L_to_S",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"schemaName": "nucc",
										"tableName": "nucc_taxonomy"
									},
									"source2": {},
									"sink1": {
										"schemaName": "nucc",
										"tableName": "s_nucc_taxonomy"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AM_Test"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_L_to_S_copy1_dev')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Read Table List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PUF_V_QC_List",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Read Table List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Read Table List').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Copy_L_to_S",
											"type": "DataFlowReference",
											"parameters": {
												"l_table_name": "'nucc_taxonomy'"
											},
											"datasetParameters": {
												"source1": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"source2": {},
												"sink1": {
													"schemaName": "@item().table_schema",
													"tableName": {
														"value": "s_nucc_taxonomy",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AM_Test"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_NPPES_Monthly_Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PUF_DF_2a_Stage_NPPES",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_2a_Stage_NPPES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProviderTaxonomyMonth": {},
									"ProviderOtherIdentifiers": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PUF_NPPES"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-09T15:09:38Z"
			},
			"dependsOn": []
		}
	]
}