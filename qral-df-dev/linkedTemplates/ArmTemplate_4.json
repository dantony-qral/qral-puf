{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "qral-df-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DA_Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_temp",
								"type": "DatasetReference"
							},
							"name": "Redshift"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_2b_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "Azure"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Exists2"
						}
					],
					"script": "source(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_group_taxonomy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Redshift\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tposition as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\thealthcare_provider_group_taxonomy as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Azure\nAzure, Redshift exists(Azure@npi == Redshift@npi,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists2\nExists2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DA_Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_temp_a",
								"type": "DatasetReference"
							},
							"name": "tempa"
						},
						{
							"dataset": {
								"referenceName": "PUF_temp_b",
								"type": "DatasetReference"
							},
							"name": "tempb"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						}
					],
					"script": "source(output(\n\t\ttemp_int as integer,\n\t\ttemp_var as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> tempa\nsource(output(\n\t\ttemp_int_b as integer,\n\t\ttemp_var_b as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> tempb\ntempa, tempb join(temp_int == temp_int_b,\n\tjoinType:'outer',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_to_stage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "AM_test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "landingTableSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_azure_sql_dev",
								"type": "DatasetReference"
							},
							"name": "writeDataToStage"
						}
					],
					"transformations": [
						{
							"name": "addLoaddate"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> landingTableSource\nlandingTableSource derive(load_date = currentTimestamp(),\n\t\tcurrent_flag = 1) ~> addLoaddate\naddLoaddate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> writeDataToStage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_Other_Provider_Identifier')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_2_Stage_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_2_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesMain"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_OTHER_PROVIDER_ID",
								"type": "DatasetReference"
							},
							"name": "ProdCmsNppesOtherProviderID"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_2b_st_cms_nppes_other_provider_identifier",
								"type": "DatasetReference"
							},
							"name": "StCMSNPPESOtherProvID"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ProdNPPESOtherProvIDCurrent"
						},
						{
							"name": "StNPPESMainActive"
						},
						{
							"name": "ActiveNPI"
						},
						{
							"name": "StNPPESMainActiveNPI"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "Select2"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "NewNPIProviderOtherIDFinal"
						},
						{
							"name": "StCMSNPPESOtherProvIDFixColumnName"
						},
						{
							"name": "NPIInBothNewData"
						},
						{
							"name": "NPIInBothNewDataFinal"
						},
						{
							"name": "NPIInBothOldData"
						},
						{
							"name": "NPIInBothOldDataFinal"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SetOldDataToActiveFlag0"
						},
						{
							"name": "SetOldDataToCurrentFlag0"
						},
						{
							"name": "NPIOldDataActiveFlag0Final"
						},
						{
							"name": "NPIOldDataCurrentFlag0Final"
						},
						{
							"name": "NewChangeDataFinal"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Select8"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Join3"
						},
						{
							"name": "InBothStOtherProvID"
						},
						{
							"name": "Join4"
						},
						{
							"name": "DataMonthTemp"
						},
						{
							"name": "DataMonth"
						},
						{
							"name": "AppendDataMonth"
						}
					],
					"script": "source(output(\n\t\tcurrent_flag as string,\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCmsNppesMain\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tother_provider_identifier as string,\n\t\tother_provider_identifier_type_code as string,\n\t\tother_provider_identifier_state as string,\n\t\tother_provider_identifier_issuer as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProdCmsNppesOtherProviderID\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\t{other provider identifier} as string,\n\t\t{other provider identifier state} as string,\n\t\t{other provider identifier issuer} as string,\n\t\t{other provider identifier type code} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCMSNPPESOtherProvID\nProdCmsNppesOtherProviderID filter(current_flag=='1') ~> ProdNPPESOtherProvIDCurrent\nStCmsNppesMain filter({active flag}=='1') ~> StNPPESMainActive\nStNPPESMainActive aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> ActiveNPI\nActiveNPI select(mapColumn(\n\t\teach(match(in([('npi')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StNPPESMainActiveNPI\nStCMSNPPESOtherProvIDFixColumnName aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> Aggregate2\nAggregate2 select(mapColumn(\n\t\ttemp_npi = npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, Select2 join(temp_npi == npi_prod,\n\tjoinType:'outer',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nProdNPPESOtherProvIDCurrent aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> Aggregate3\nAggregate3 select(mapColumn(\n\t\tnpi_prod = npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nJoin1 split(isNull(npi_prod),\n\ttemp_npi==npi_prod,\n\tdisjoint: false) ~> ConditionalSplit1@(NewNPI, InBoth, OldNPI)\nConditionalSplit1@NewNPI select(mapColumn(\n\t\ttemp_npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nConditionalSplit1@InBoth select(mapColumn(\n\t\ttemp_npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nConditionalSplit1@OldNPI select(mapColumn(\n\t\ttemp_npi = npi_prod\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nJoin2 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NewNPIProviderOtherIDFinal\nStCMSNPPESOtherProvID select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier = {other provider identifier},\n\t\tother_provider_identifier_issuer = {other provider identifier issuer},\n\t\tother_provider_identifier_state = {other provider identifier state},\n\t\tother_provider_identifier_type_code = {other provider identifier type code}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StCMSNPPESOtherProvIDFixColumnName\nSelect8, DerivedColumn2 exists(Compare_key_StOther == Compare_key_ProdOther,\n\tnegate:true,\n\tbroadcast: 'auto')~> NPIInBothNewData\nNPIInBothNewData select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIInBothNewDataFinal\nDerivedColumn2, DerivedColumn3 exists(Compare_key_ProdOther == Compare_key_StOther,\n\tnegate:true,\n\tbroadcast: 'auto')~> NPIInBothOldData\nDerivedColumn1 select(mapColumn(\n\t\tnpi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_type_code,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_issuer\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIInBothOldDataFinal\nNPIInBothOldData derive(current_flag = '0') ~> DerivedColumn1\nSelect5, StNPPESMainActiveNPI exists(temp_npi == npi,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nJoin4 filter({active flag}=='1') ~> Filter1\nAppendDataMonth derive({active flag} = '0',\n\t\tdata_month = data_month_temp) ~> SetOldDataToActiveFlag0\nFilter1 derive(current_flag = '0') ~> SetOldDataToCurrentFlag0\nSetOldDataToActiveFlag0 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIOldDataActiveFlag0Final\nSetOldDataToCurrentFlag0 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIOldDataCurrentFlag0Final\nNewNPIProviderOtherIDFinal, NPIInBothNewDataFinal, NPIInBothOldDataFinal, NPIOldDataActiveFlag0Final, NPIOldDataCurrentFlag0Final union(byName: true)~> NewChangeDataFinal\nDerivedColumn5 select(mapColumn(\n\t\teach(match(name!='current_flag'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin3 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_type_code,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_issuer\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nDerivedColumn3 select(mapColumn(\n\t\ttemp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tother_provider_identifier,\n\t\tother_provider_identifier_issuer,\n\t\tother_provider_identifier_state,\n\t\tother_provider_identifier_type_code,\n\t\tCompare_key_StOther\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nSelect7 derive(Compare_key_ProdOther = upper(concat(npi,iifNull({entity type code},''),iifNull({active flag},''),iifNull(other_provider_identifier,''),iifNull(other_provider_identifier_type_code,''),\r\niifNull(other_provider_identifier_state,''),iifNull(other_provider_identifier_issuer,'')))) ~> DerivedColumn2\nInBothStOtherProvID derive(Compare_key_StOther = upper(concat(npi,iifNull({entity type code},''),iifNull({active flag},''),iifNull(other_provider_identifier,''),iifNull(other_provider_identifier_type_code,''),\r\niifNull(other_provider_identifier_state,''),iifNull(other_provider_identifier_issuer,'')))) ~> DerivedColumn3\nNewChangeDataFinal derive(OldData_CompareKey = upper(concat(npi,iifNull(toString(data_month),''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(other_provider_identifier,''),iifNull(other_provider_identifier_type_code,''), iifNull(other_provider_identifier_state,''),iifNull(other_provider_identifier_issuer,'')))) ~> DerivedColumn5\nSelect3, StCMSNPPESOtherProvIDFixColumnName join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join2\nSelect4, ProdNPPESOtherProvIDCurrent join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join3\nSelect4, StCMSNPPESOtherProvIDFixColumnName join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> InBothStOtherProvID\nExists1, StCMSNPPESOtherProvIDFixColumnName join(temp_npi == npi,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join4\nStCMSNPPESOtherProvID aggregate(groupBy(data_month,\n\t\t{active flag}),\n\ttemp = count(data_month)) ~> DataMonthTemp\nDataMonthTemp select(mapColumn(\n\t\tdata_month_temp = data_month,\n\t\t{active flag}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DataMonth\nFilter1, DataMonth join(StCMSNPPESOtherProvIDFixColumnName@{active flag} == DataMonth@{active flag},\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> AppendDataMonth\nSelect6 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_4_MtP_NPPES_Main')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_3_Move_to_Prod_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_3_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesMain3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_MAIN",
								"type": "DatasetReference"
							},
							"name": "ProdNPPESMain"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          current_flag as string,",
						"          npi as string,",
						"          data_month as integer,",
						"          {active flag} as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {replacement npi} as string,",
						"          {employer identification number (ein)} as string,",
						"          {provider organization name (legal business name)} as string,",
						"          {provider last name (legal name)} as string,",
						"          {provider first name} as string,",
						"          {provider middle name} as string,",
						"          {provider name prefix text} as string,",
						"          {provider name suffix text} as string,",
						"          {provider credential text} as string,",
						"          {provider other organization name} as string,",
						"          {provider other organization name type code} as string,",
						"          {provider other last name} as string,",
						"          {provider other first name} as string,",
						"          {provider other middle name} as string,",
						"          {provider other name prefix text} as string,",
						"          {provider other name suffix text} as string,",
						"          {provider other credential text} as string,",
						"          {provider other last name type code} as string,",
						"          {provider first line business mailing address} as string,",
						"          {provider second line business mailing address} as string,",
						"          {provider business mailing address city name} as string,",
						"          {provider business mailing address state name} as string,",
						"          {provider business mailing address postal code} as string,",
						"          {provider business mailing address telephone number} as string,",
						"          {provider business mailing address fax number} as string,",
						"          {provider first line business practice location address} as string,",
						"          {provider second line business practice location address} as string,",
						"          {provider business practice location address city name} as string,",
						"          {provider business practice location address state name} as string,",
						"          {provider business practice location address postal code} as string,",
						"          {provider business practice location address country code out us} as string,",
						"          {provider business practice location address telephone number} as string,",
						"          {provider business practice location address fax number} as string,",
						"          {provider enumeration date} as date,",
						"          {last update date} as date,",
						"          {npi deactivation reason code} as string,",
						"          {npi deactivation date} as date,",
						"          {npi reactivation date} as date,",
						"          {provider gender code} as string,",
						"          {authorized official last name} as string,",
						"          {authorized official first name} as string,",
						"          {authorized official middle name} as string,",
						"          {authorized official title or position} as string,",
						"          {authorized official telephone number} as string,",
						"          {is sole proprietor} as string,",
						"          {is organization subpart} as string,",
						"          {parent organization lbn} as string,",
						"          {parent organization tin} as string,",
						"          {authorized official name prefix text} as string,",
						"          {authorized official name suffix text} as string,",
						"          {authorized official credential text} as string,",
						"          {healthcare provider primary taxonomy code} as string,",
						"          {healthcare provider primary group taxonomy} as string,",
						"          {provider primary license number} as string,",
						"          {provider primary license number state code} as string,",
						"          primary_taxonomy_grouping as string,",
						"          primary_taxonomy_classification as string,",
						"          primary_taxonomy_specialization as string,",
						"          {provider business mailing address country code (if outside u.s.)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StCmsNppesMain3",
						"StCmsNppesMain3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          current_flag as string,",
						"          data_month as integer,",
						"          npi as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {replacement npi} as string,",
						"          {employer identification number (ein)} as string,",
						"          {provider organization name (legal business name)} as string,",
						"          {provider last name (legal name)} as string,",
						"          {provider first name} as string,",
						"          {provider middle name} as string,",
						"          {provider name prefix text} as string,",
						"          {provider name suffix text} as string,",
						"          {provider credential text} as string,",
						"          {provider other organization name} as string,",
						"          {provider other organization name type code} as string,",
						"          {provider other last name} as string,",
						"          {provider other first name} as string,",
						"          {provider other middle name} as string,",
						"          {provider other name prefix text} as string,",
						"          {provider other name suffix text} as string,",
						"          {provider other credential text} as string,",
						"          {provider other last name type code} as string,",
						"          {provider first line business mailing address} as string,",
						"          {provider second line business mailing address} as string,",
						"          {provider business mailing address city name} as string,",
						"          {provider business mailing address state name} as string,",
						"          {provider business mailing address postal code} as string,",
						"          {provider business mailing address country code (if outside u.s.)} as string,",
						"          {provider business mailing address telephone number} as string,",
						"          {provider business mailing address fax number} as string,",
						"          {provider first line business practice location address} as string,",
						"          {provider second line business practice location address} as string,",
						"          {provider business practice location address city name} as string,",
						"          {provider business practice location address state name} as string,",
						"          {provider business practice location address postal code} as string,",
						"          {provider business practice location address country code out us} as string,",
						"          {provider business practice location address telephone number} as string,",
						"          {provider business practice location address fax number} as string,",
						"          {provider enumeration date} as date,",
						"          {last update date} as date,",
						"          {npi deactivation reason code} as string,",
						"          {npi deactivation date} as date,",
						"          {npi reactivation date} as date,",
						"          {active flag} as string,",
						"          {provider gender code} as string,",
						"          {authorized official last name} as string,",
						"          {authorized official first name} as string,",
						"          {authorized official middle name} as string,",
						"          {authorized official title or position} as string,",
						"          {authorized official telephone number} as string,",
						"          {healthcare provider primary taxonomy code} as string,",
						"          primary_taxonomy_grouping as string,",
						"          primary_taxonomy_classification as string,",
						"          primary_taxonomy_specialization as string,",
						"          {provider primary license number} as string,",
						"          {provider primary license number state code} as string,",
						"          {healthcare provider primary group taxonomy} as string,",
						"          {is sole proprietor} as string,",
						"          {is organization subpart} as string,",
						"          {parent organization lbn} as string,",
						"          {parent organization tin} as string,",
						"          {authorized official name prefix text} as string,",
						"          {authorized official name suffix text} as string,",
						"          {authorized official credential text} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ProdNPPESMain"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_4_MtP_NPPES_Provider_Taxonomy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_3_Move_to_Prod_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_3_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesProviderTaxonomy3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_PROVIDER_TAXONOMY",
								"type": "DatasetReference"
							},
							"name": "ProdNPPESProviderTaxonomy"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          current_flag as string,",
						"          data_month as integer,",
						"          npi as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {active flag} as string,",
						"          healthcare_provider_taxonomy_code as string,",
						"          taxonomy_grouping as string,",
						"          taxonomy_classification as string,",
						"          taxonomy_specialization as string,",
						"          provider_license_number as string,",
						"          provider_license_number_state_code as string,",
						"          healthcare_provider_primary_taxonomy_switch as string,",
						"          healthcare_provider_group_taxonomy as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StCmsNppesProviderTaxonomy3",
						"StCmsNppesProviderTaxonomy3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          current_flag as string,",
						"          data_month as integer,",
						"          npi as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {active flag} as string,",
						"          healthcare_provider_taxonomy_code as string,",
						"          taxonomy_grouping as string,",
						"          taxonomy_classification as string,",
						"          taxonomy_specialization as string,",
						"          provider_license_number as string,",
						"          provider_license_number_state_code as string,",
						"          healthcare_provider_primary_taxonomy_switch as string,",
						"          healthcare_provider_group_taxonomy as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ProdNPPESProviderTaxonomy"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_4_MtP_NPPES_Other_Provider_Identifier')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_3_Move_to_Prod_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_3_st_cms_nppes_other_provider_id",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesOtherProviderID3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_OTHER_PROVIDER_ID",
								"type": "DatasetReference"
							},
							"name": "ProdNPPESOtherProviderIdentifier"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          current_flag as string,",
						"          data_month as integer,",
						"          npi as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {active flag} as string,",
						"          other_provider_identifier as string,",
						"          other_provider_identifier_type_code as string,",
						"          other_provider_identifier_state as string,",
						"          other_provider_identifier_issuer as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StCmsNppesOtherProviderID3",
						"StCmsNppesOtherProviderID3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          current_flag as string,",
						"          data_month as integer,",
						"          npi as string,",
						"          {entity type code} as string,",
						"          {entity type} as string,",
						"          {active flag} as string,",
						"          other_provider_identifier as string,",
						"          other_provider_identifier_type_code as string,",
						"          other_provider_identifier_state as string,",
						"          other_provider_identifier_issuer as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ProdNPPESOtherProviderIdentifier"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AM_Execute_DQM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Readin_QC_List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "BLOB_XLS_TEST_SQL_LOOP_AM",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_List').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run_QC_SQL",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "AM_TEST_Execute_SQL_Query",
											"type": "DataFlowReference",
											"parameters": {
												"sql_query": {
													"value": "'@{item().query}'",
													"type": "Expression"
												},
												"qc_id": {
													"value": "@item().query_number",
													"type": "Expression"
												},
												"pipeline_name": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"pkey_column": {
													"value": "'@{'code'}'",
													"type": "Expression"
												},
												"table_name": {
													"value": "'@{item().table_name}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"QCTable": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"sink1": {},
												"sink2": {
													"schemaName": "nucc",
													"tableName": "qc_summary"
												},
												"sink3": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@concat('qc_rejects_',item().table_name)",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime-TEST2",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AM_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DA_Test_Loop_SQL_Query')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_List').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run_QC_SQL",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DA_TEST_1_QC_Exception_Detail",
											"type": "DataFlowReference",
											"parameters": {
												"sql_query": {
													"value": "'@{item().query}'",
													"type": "Expression"
												},
												"qc_id": {
													"value": "@item().query_number",
													"type": "Expression"
												},
												"pipeline_name": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"pkey_column": {
													"value": "'@{item().pkey_column}'",
													"type": "Expression"
												},
												"final_sql_query": "\"SELECT CONCAT({$pkey_column},'') as pkey_column_values, CONCAT({$column_metric_name},'|') as column_metric_error_values {$sql_query}\"",
												"column_metric_name": {
													"value": "'@{item().column_metric_name}'",
													"type": "Expression"
												},
												"alert_type": {
													"value": "'@{item().alert_code}'",
													"type": "Expression"
												},
												"pipeline_run_id": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"pipeline_trigger_time": {
													"value": "'@{pipeline().TriggerTime}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"QCTable": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime-TEST2",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Readin_QC_List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "BLOB_XLS_TEST_SQL_LOOP",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_1_DQM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_List').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run_QC_SQL",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DA_TEST_1_QC_Exception_Detail",
											"type": "DataFlowReference",
											"parameters": {
												"sql_query": {
													"value": "'@{item().sql_query}'",
													"type": "Expression"
												},
												"qc_id": {
													"value": "@item().qc_id",
													"type": "Expression"
												},
												"pipeline_name": {
													"value": "'@{pipeline()?.TriggeredByPipelineName}'",
													"type": "Expression"
												},
												"pkey_column": {
													"value": "'@{item().pkey_column_names}'",
													"type": "Expression"
												},
												"final_sql_query": "\"SELECT CONCAT({$pkey_column},'') as pkey_column_values, CONCAT({$column_metric_name},'|') as column_metric_error_values {$sql_query}\"",
												"column_metric_name": {
													"value": "'@{item().column_metric_name}'",
													"type": "Expression"
												},
												"alert_type": {
													"value": "'@{item().alert_code}'",
													"type": "Expression"
												},
												"pipeline_run_id": {
													"value": "'@{pipeline()?.TriggeredByPipelineRunId}'",
													"type": "Expression"
												},
												"pipeline_trigger_time": {
													"value": "'@{convertFromUtc(pipeline().TriggerTime,'Central Standard Time', 'yyyy-MM-dd HH:mm:ss.fff')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"QCTable": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime-TEST2",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Readin_QC_List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * FROM dqm.v_qc_list WHERE active_flag = 1 AND pipeline_name = ''',pipeline()?.TriggeredByPipelineName,'''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PUF_V_QC_List",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_1_DQM_AM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_List').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "RUN_QC_SQL_AM",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "RUN_QC_SQL_AM",
											"type": "DataFlowReference",
											"parameters": {
												"sql_query": {
													"value": "'@{item().sql_query}'",
													"type": "Expression"
												},
												"qc_id": {
													"value": "@item().qc_id",
													"type": "Expression"
												},
												"pipeline_name": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"pkey_column": {
													"value": "'@{item().pkey_column_names}'",
													"type": "Expression"
												},
												"final_sql_query": "\"SELECT CONCAT({$pkey_column},'') as pkey_column_values, CONCAT({$column_metric_name},'|') as column_metric_error_values {$sql_query}\"",
												"column_metric_name": {
													"value": "'@{item().column_metric_name}'",
													"type": "Expression"
												},
												"alert_type": {
													"value": "'@{item().alert_code}'",
													"type": "Expression"
												},
												"pipeline_run_id": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"pipeline_trigger_time": {
													"value": "'@{pipeline().TriggerTime}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"QCTable": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Readin_QC_List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PUF_V_QC_List",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AM_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_2_DQM_Alert_Action')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_Tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run_QC_Alert_Action",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DA_TEST_2_QC_Alert_Action",
											"type": "DataFlowReference",
											"parameters": {
												"pipeline_run_id": {
													"value": "'@{pipeline()?.TriggeredByPipelineRunId}'",
													"type": "Expression"
												},
												"sql_query": "\"SELECT *, CONCAT({$pkey_column},'') as pkey_column_values FROM {$input_SchemaName}.{$input_TableName}\"",
												"input_SchemaName": {
													"value": "'@{item().table_schema}'",
													"type": "Expression"
												},
												"input_TableName": {
													"value": "'@{item().table_name}'",
													"type": "Expression"
												},
												"pkey_column": {
													"value": "'@{item().pkey_column_names}'",
													"type": "Expression"
												},
												"pipeline_trigger_time": {
													"value": "'@{convertFromUtc(pipeline().TriggerTime,'Central Standard Time', 'yyyy-MM-dd HH:mm:ss.fff')}'",
													"type": "Expression"
												},
												"pipeline_name": {
													"value": "'@{pipeline()?.TriggeredByPipelineName}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"InputTable": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"QCExceptionDetail": {},
												"sink1": {
													"schemaName": "@item().table_schema",
													"tableName": {
														"value": "@concat('temp_',item().table_name)",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime1-Test4-16cores",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Readin_QC_Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT table_schema, table_name, pkey_column_names FROM dqm.v_qc_list WHERE pipeline_name = ''',pipeline()?.TriggeredByPipelineName,''' GROUP BY table_schema, table_name, pkey_column_names')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PUF_V_QC_List",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_L_to_S')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Copy_L_to_S",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"schemaName": "nucc",
										"tableName": "nucc_taxonomy"
									},
									"source2": {},
									"sink1": {
										"schemaName": "nucc",
										"tableName": "s_nucc_taxonomy"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AM_Test"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_L_to_S_copy1_dev')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Read Table List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PUF_V_QC_List",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Read Table List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Read Table List').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Copy_L_to_S",
											"type": "DataFlowReference",
											"parameters": {
												"l_table_name": "'nucc_taxonomy'"
											},
											"datasetParameters": {
												"source1": {
													"schemaName": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"tableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"source2": {},
												"sink1": {
													"schemaName": "@item().table_schema",
													"tableName": {
														"value": "s_nucc_taxonomy",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AM_Test"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_NPPES_Monthly_Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PUF_DF_2a_Stage_NPPES",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_2a_Stage_NPPES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProviderTaxonomyMonth": {},
									"ProviderOtherIdentifiers": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PUF_NPPES"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-09T15:09:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_NPPES_Monthly_Update_Process_Jobrun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PUF_DF_1_Load_NPPES_Month",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_1_Load_NPPES_Month",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawCMSNPPESMonth": {},
									"sinkNPPESMain": {},
									"sinkNPPESOtherProvider": {},
									"sinkProviderTaxonomy": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_2a_Stage_NPPES",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_1_Load_NPPES_Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_2a_Stage_NPPES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProviderTaxonomyMonth": {},
									"ProviderOtherIdentifiers": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_2b_Stage_NPPES",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_2a_Stage_NPPES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_2b_Stage_NPPES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageProviderTaxonomy": {},
									"NUCCTaxonomy": {},
									"NPPESProviderMain": {},
									"InputStateCorrection": {},
									"InputCountryCorrection": {},
									"StageOtherProvID": {},
									"sink1": {},
									"LoadNPPESMainStage2a": {},
									"sinkStNPPESProvOtherID": {},
									"testCorrectedCountryPractice": {
										"schemaName": "temp",
										"tableName": "test_corrected_country_practice"
									},
									"testCorrectedCountryMailing": {
										"schemaName": "temp",
										"tableName": "test_corrected_country_mailing"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_3_Stage_NPPES_Main",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_2b_Stage_NPPES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_3_Stage_NPPES_Main",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StCmsNppesMain": {},
									"ProdCmsNppesMain": {},
									"SinkNPPESMain": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_3_Stage_NPPES_Other_Provider_Identifier",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_2b_Stage_NPPES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_3_Stage_NPPES_Other_Provider_Identifier",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StCmsNppesMain": {},
									"ProdCmsNppesOtherProviderID": {},
									"StCMSNPPESOtherProvID": {},
									"sink1": {},
									"TestNewNPIID": {
										"schemaName": "temp",
										"tableName": "TestNewNPIID"
									},
									"TestBothNewIDOnly": {
										"schemaName": "temp",
										"tableName": "TestBothNewIDOnly"
									},
									"TestBothOldOnly": {
										"schemaName": "temp",
										"tableName": "TestBothOldOnly"
									},
									"TestAggrError": {
										"schemaName": "temp",
										"tableName": "TestAggrError"
									},
									"TestOldActive": {
										"schemaName": "temp",
										"tableName": "TestOldActive"
									},
									"TestOldOtherProvData": {
										"schemaName": "temp",
										"tableName": "TestOldOtherProvData"
									},
									"TestCompareKeyWithMain": {
										"schemaName": "temp",
										"tableName": "TestCompareKeyWithMain"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_3_Stage_NPPES_Provider_Taxonomy",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_2b_Stage_NPPES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_3_Stage_NPPES_Provider_Taxonomy",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StCmsNppesMain": {},
									"ProdCmsNppesProvTaxonomy": {},
									"StCMSNPPESProvTaxonomy": {},
									"sink1": {},
									"TestAggrError": {
										"schemaName": "temp",
										"tableName": "ProvTax_TestAggrError"
									},
									"TestCompareKey": {
										"schemaName": "temp",
										"tableName": "ProvTax_TestCompareKeyWithMain"
									},
									"TestBothOldOnly": {
										"schemaName": "temp",
										"tableName": "ProvTax_TestBothOldOnly"
									},
									"TestBothNewIDOnly": {
										"schemaName": "temp",
										"tableName": "ProvTax_TestBothNewIDOnly"
									},
									"TestOldProvTaxonomy": {
										"schemaName": "temp",
										"tableName": "ProvTax_TestOldProvTaxonomy"
									},
									"TestOldActive": {
										"schemaName": "temp",
										"tableName": "ProvTax_TestOldActive"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PUF_NPPES"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T03:52:53Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Readin_NUCC_Taxonomy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Initial_Load_NUCC_Taxonomy",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "A0_Initial_Load_NUCC_Taxonomy",
								"type": "DataFlowReference",
								"parameters": {
									"nucc_year_raw_file_suffix": {
										"value": "'@{pipeline().parameters.nucc_year_raw_file_suffix}'",
										"type": "Expression"
									},
									"data_year": {
										"value": "'@{pipeline().parameters.data_year}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadinRawNUCCTaxonomy": {},
									"LoadToSQL": {
										"data_year": {
											"value": "@pipeline().parameters.data_year",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test3",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"nucc_year_raw_file_suffix": {
						"type": "string"
					},
					"data_year": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PUF_NUCC"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-19T03:20:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Redshift": {},
									"Azure": {},
									"sink1": {
										"schemaName": "temp",
										"tableName": "compare_prov_taxonomy"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-20T22:40:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tempa": {},
									"tempb": {},
									"sink1": {
										"schemaName": "temp",
										"tableName": "a_b_join"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-20T23:17:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "test_Other_Provider_Identifier",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StCmsNppesMain": {},
									"ProdCmsNppesOtherProviderID": {},
									"StCMSNPPESOtherProvID": {},
									"sink1": {
										"schemaName": "nppes",
										"tableName": "test_OtherProvider"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/test_Other_Provider_Identifier')]"
			]
		}
	]
}