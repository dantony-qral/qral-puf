{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "qral-df-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_2a_Stage_NPPES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_2_Stage_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_1_LD_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "ProviderTaxonomyMonth"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_1_ld_cms_nppes_other_provider_identifiers",
								"type": "DatasetReference"
							},
							"name": "ProviderOtherIdentifiers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_2a_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_2_st_cms_nppes_other_provider_identifier",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "AddCurrentFlag"
						},
						{
							"name": "Normalized"
						},
						{
							"name": "RefineFieldNamePos"
						},
						{
							"name": "Pivot1"
						},
						{
							"name": "AddCurrentFlagProvOtherID"
						},
						{
							"name": "NormalizedProvOtherID"
						},
						{
							"name": "RefineFieldNamePosProvOtherID"
						},
						{
							"name": "Pivot2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						}
					],
					"script": "source(output(\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{healthcare provider taxonomy code_1} as string,\n\t\t{provider license number_1} as string,\n\t\t{provider license number state code_1} as string,\n\t\t{healthcare provider primary taxonomy switch_1} as string,\n\t\t{healthcare provider taxonomy code_2} as string,\n\t\t{provider license number_2} as string,\n\t\t{provider license number state code_2} as string,\n\t\t{healthcare provider primary taxonomy switch_2} as string,\n\t\t{healthcare provider taxonomy code_3} as string,\n\t\t{provider license number_3} as string,\n\t\t{provider license number state code_3} as string,\n\t\t{healthcare provider primary taxonomy switch_3} as string,\n\t\t{healthcare provider taxonomy code_4} as string,\n\t\t{provider license number_4} as string,\n\t\t{provider license number state code_4} as string,\n\t\t{healthcare provider primary taxonomy switch_4} as string,\n\t\t{healthcare provider taxonomy code_5} as string,\n\t\t{provider license number_5} as string,\n\t\t{provider license number state code_5} as string,\n\t\t{healthcare provider primary taxonomy switch_5} as string,\n\t\t{healthcare provider taxonomy code_6} as string,\n\t\t{provider license number_6} as string,\n\t\t{provider license number state code_6} as string,\n\t\t{healthcare provider primary taxonomy switch_6} as string,\n\t\t{healthcare provider taxonomy code_7} as string,\n\t\t{provider license number_7} as string,\n\t\t{provider license number state code_7} as string,\n\t\t{healthcare provider primary taxonomy switch_7} as string,\n\t\t{healthcare provider taxonomy code_8} as string,\n\t\t{provider license number_8} as string,\n\t\t{provider license number state code_8} as string,\n\t\t{healthcare provider primary taxonomy switch_8} as string,\n\t\t{healthcare provider taxonomy code_9} as string,\n\t\t{provider license number_9} as string,\n\t\t{provider license number state code_9} as string,\n\t\t{healthcare provider primary taxonomy switch_9} as string,\n\t\t{healthcare provider taxonomy code_10} as string,\n\t\t{provider license number_10} as string,\n\t\t{provider license number state code_10} as string,\n\t\t{healthcare provider primary taxonomy switch_10} as string,\n\t\t{healthcare provider taxonomy code_11} as string,\n\t\t{provider license number_11} as string,\n\t\t{provider license number state code_11} as string,\n\t\t{healthcare provider primary taxonomy switch_11} as string,\n\t\t{healthcare provider taxonomy code_12} as string,\n\t\t{provider license number_12} as string,\n\t\t{provider license number state code_12} as string,\n\t\t{healthcare provider primary taxonomy switch_12} as string,\n\t\t{healthcare provider taxonomy code_13} as string,\n\t\t{provider license number_13} as string,\n\t\t{provider license number state code_13} as string,\n\t\t{healthcare provider primary taxonomy switch_13} as string,\n\t\t{healthcare provider taxonomy code_14} as string,\n\t\t{provider license number_14} as string,\n\t\t{provider license number state code_14} as string,\n\t\t{healthcare provider primary taxonomy switch_14} as string,\n\t\t{healthcare provider taxonomy code_15} as string,\n\t\t{provider license number_15} as string,\n\t\t{provider license number state code_15} as string,\n\t\t{healthcare provider primary taxonomy switch_15} as string,\n\t\t{healthcare provider taxonomy group_1} as string,\n\t\t{healthcare provider taxonomy group_2} as string,\n\t\t{healthcare provider taxonomy group_3} as string,\n\t\t{healthcare provider taxonomy group_4} as string,\n\t\t{healthcare provider taxonomy group_5} as string,\n\t\t{healthcare provider taxonomy group_6} as string,\n\t\t{healthcare provider taxonomy group_7} as string,\n\t\t{healthcare provider taxonomy group_8} as string,\n\t\t{healthcare provider taxonomy group_9} as string,\n\t\t{healthcare provider taxonomy group_10} as string,\n\t\t{healthcare provider taxonomy group_11} as string,\n\t\t{healthcare provider taxonomy group_12} as string,\n\t\t{healthcare provider taxonomy group_13} as string,\n\t\t{healthcare provider taxonomy group_14} as string,\n\t\t{healthcare provider taxonomy group_15} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProviderTaxonomyMonth\nsource(output(\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type} as string,\n\t\t{entity type code} as string,\n\t\t{other provider identifier_1} as string,\n\t\t{other provider identifier type code_1} as string,\n\t\t{other provider identifier state_1} as string,\n\t\t{other provider identifier issuer_1} as string,\n\t\t{other provider identifier_2} as string,\n\t\t{other provider identifier type code_2} as string,\n\t\t{other provider identifier state_2} as string,\n\t\t{other provider identifier issuer_2} as string,\n\t\t{other provider identifier_3} as string,\n\t\t{other provider identifier type code_3} as string,\n\t\t{other provider identifier state_3} as string,\n\t\t{other provider identifier issuer_3} as string,\n\t\t{other provider identifier_4} as string,\n\t\t{other provider identifier type code_4} as string,\n\t\t{other provider identifier state_4} as string,\n\t\t{other provider identifier issuer_4} as string,\n\t\t{other provider identifier_5} as string,\n\t\t{other provider identifier type code_5} as string,\n\t\t{other provider identifier state_5} as string,\n\t\t{other provider identifier issuer_5} as string,\n\t\t{other provider identifier_6} as string,\n\t\t{other provider identifier type code_6} as string,\n\t\t{other provider identifier state_6} as string,\n\t\t{other provider identifier issuer_6} as string,\n\t\t{other provider identifier_7} as string,\n\t\t{other provider identifier type code_7} as string,\n\t\t{other provider identifier state_7} as string,\n\t\t{other provider identifier issuer_7} as string,\n\t\t{other provider identifier_8} as string,\n\t\t{other provider identifier type code_8} as string,\n\t\t{other provider identifier state_8} as string,\n\t\t{other provider identifier issuer_8} as string,\n\t\t{other provider identifier_9} as string,\n\t\t{other provider identifier type code_9} as string,\n\t\t{other provider identifier state_9} as string,\n\t\t{other provider identifier issuer_9} as string,\n\t\t{other provider identifier_10} as string,\n\t\t{other provider identifier type code_10} as string,\n\t\t{other provider identifier state_10} as string,\n\t\t{other provider identifier issuer_10} as string,\n\t\t{other provider identifier_11} as string,\n\t\t{other provider identifier type code_11} as string,\n\t\t{other provider identifier state_11} as string,\n\t\t{other provider identifier issuer_11} as string,\n\t\t{other provider identifier_12} as string,\n\t\t{other provider identifier type code_12} as string,\n\t\t{other provider identifier state_12} as string,\n\t\t{other provider identifier issuer_12} as string,\n\t\t{other provider identifier_13} as string,\n\t\t{other provider identifier type code_13} as string,\n\t\t{other provider identifier state_13} as string,\n\t\t{other provider identifier issuer_13} as string,\n\t\t{other provider identifier_14} as string,\n\t\t{other provider identifier type code_14} as string,\n\t\t{other provider identifier state_14} as string,\n\t\t{other provider identifier issuer_14} as string,\n\t\t{other provider identifier_15} as string,\n\t\t{other provider identifier type code_15} as string,\n\t\t{other provider identifier state_15} as string,\n\t\t{other provider identifier issuer_15} as string,\n\t\t{other provider identifier_16} as string,\n\t\t{other provider identifier type code_16} as string,\n\t\t{other provider identifier state_16} as string,\n\t\t{other provider identifier issuer_16} as string,\n\t\t{other provider identifier_17} as string,\n\t\t{other provider identifier type code_17} as string,\n\t\t{other provider identifier state_17} as string,\n\t\t{other provider identifier issuer_17} as string,\n\t\t{other provider identifier_18} as string,\n\t\t{other provider identifier type code_18} as string,\n\t\t{other provider identifier state_18} as string,\n\t\t{other provider identifier issuer_18} as string,\n\t\t{other provider identifier_19} as string,\n\t\t{other provider identifier type code_19} as string,\n\t\t{other provider identifier state_19} as string,\n\t\t{other provider identifier issuer_19} as string,\n\t\t{other provider identifier_20} as string,\n\t\t{other provider identifier type code_20} as string,\n\t\t{other provider identifier state_20} as string,\n\t\t{other provider identifier issuer_20} as string,\n\t\t{other provider identifier_21} as string,\n\t\t{other provider identifier type code_21} as string,\n\t\t{other provider identifier state_21} as string,\n\t\t{other provider identifier issuer_21} as string,\n\t\t{other provider identifier_22} as string,\n\t\t{other provider identifier type code_22} as string,\n\t\t{other provider identifier state_22} as string,\n\t\t{other provider identifier issuer_22} as string,\n\t\t{other provider identifier_23} as string,\n\t\t{other provider identifier type code_23} as string,\n\t\t{other provider identifier state_23} as string,\n\t\t{other provider identifier issuer_23} as string,\n\t\t{other provider identifier_24} as string,\n\t\t{other provider identifier type code_24} as string,\n\t\t{other provider identifier state_24} as string,\n\t\t{other provider identifier issuer_24} as string,\n\t\t{other provider identifier_25} as string,\n\t\t{other provider identifier type code_25} as string,\n\t\t{other provider identifier state_25} as string,\n\t\t{other provider identifier issuer_25} as string,\n\t\t{other provider identifier_26} as string,\n\t\t{other provider identifier type code_26} as string,\n\t\t{other provider identifier state_26} as string,\n\t\t{other provider identifier issuer_26} as string,\n\t\t{other provider identifier_27} as string,\n\t\t{other provider identifier type code_27} as string,\n\t\t{other provider identifier state_27} as string,\n\t\t{other provider identifier issuer_27} as string,\n\t\t{other provider identifier_28} as string,\n\t\t{other provider identifier type code_28} as string,\n\t\t{other provider identifier state_28} as string,\n\t\t{other provider identifier issuer_28} as string,\n\t\t{other provider identifier_29} as string,\n\t\t{other provider identifier type code_29} as string,\n\t\t{other provider identifier state_29} as string,\n\t\t{other provider identifier issuer_29} as string,\n\t\t{other provider identifier_30} as string,\n\t\t{other provider identifier type code_30} as string,\n\t\t{other provider identifier state_30} as string,\n\t\t{other provider identifier issuer_30} as string,\n\t\t{other provider identifier_31} as string,\n\t\t{other provider identifier type code_31} as string,\n\t\t{other provider identifier state_31} as string,\n\t\t{other provider identifier issuer_31} as string,\n\t\t{other provider identifier_32} as string,\n\t\t{other provider identifier type code_32} as string,\n\t\t{other provider identifier state_32} as string,\n\t\t{other provider identifier issuer_32} as string,\n\t\t{other provider identifier_33} as string,\n\t\t{other provider identifier type code_33} as string,\n\t\t{other provider identifier state_33} as string,\n\t\t{other provider identifier issuer_33} as string,\n\t\t{other provider identifier_34} as string,\n\t\t{other provider identifier type code_34} as string,\n\t\t{other provider identifier state_34} as string,\n\t\t{other provider identifier issuer_34} as string,\n\t\t{other provider identifier_35} as string,\n\t\t{other provider identifier type code_35} as string,\n\t\t{other provider identifier state_35} as string,\n\t\t{other provider identifier issuer_35} as string,\n\t\t{other provider identifier_36} as string,\n\t\t{other provider identifier type code_36} as string,\n\t\t{other provider identifier state_36} as string,\n\t\t{other provider identifier issuer_36} as string,\n\t\t{other provider identifier_37} as string,\n\t\t{other provider identifier type code_37} as string,\n\t\t{other provider identifier state_37} as string,\n\t\t{other provider identifier issuer_37} as string,\n\t\t{other provider identifier_38} as string,\n\t\t{other provider identifier type code_38} as string,\n\t\t{other provider identifier state_38} as string,\n\t\t{other provider identifier issuer_38} as string,\n\t\t{other provider identifier_39} as string,\n\t\t{other provider identifier type code_39} as string,\n\t\t{other provider identifier state_39} as string,\n\t\t{other provider identifier issuer_39} as string,\n\t\t{other provider identifier_40} as string,\n\t\t{other provider identifier type code_40} as string,\n\t\t{other provider identifier state_40} as string,\n\t\t{other provider identifier issuer_40} as string,\n\t\t{other provider identifier_41} as string,\n\t\t{other provider identifier type code_41} as string,\n\t\t{other provider identifier state_41} as string,\n\t\t{other provider identifier issuer_41} as string,\n\t\t{other provider identifier_42} as string,\n\t\t{other provider identifier type code_42} as string,\n\t\t{other provider identifier state_42} as string,\n\t\t{other provider identifier issuer_42} as string,\n\t\t{other provider identifier_43} as string,\n\t\t{other provider identifier type code_43} as string,\n\t\t{other provider identifier state_43} as string,\n\t\t{other provider identifier issuer_43} as string,\n\t\t{other provider identifier_44} as string,\n\t\t{other provider identifier type code_44} as string,\n\t\t{other provider identifier state_44} as string,\n\t\t{other provider identifier issuer_44} as string,\n\t\t{other provider identifier_45} as string,\n\t\t{other provider identifier type code_45} as string,\n\t\t{other provider identifier state_45} as string,\n\t\t{other provider identifier issuer_45} as string,\n\t\t{other provider identifier_46} as string,\n\t\t{other provider identifier type code_46} as string,\n\t\t{other provider identifier state_46} as string,\n\t\t{other provider identifier issuer_46} as string,\n\t\t{other provider identifier_47} as string,\n\t\t{other provider identifier type code_47} as string,\n\t\t{other provider identifier state_47} as string,\n\t\t{other provider identifier issuer_47} as string,\n\t\t{other provider identifier_48} as string,\n\t\t{other provider identifier type code_48} as string,\n\t\t{other provider identifier state_48} as string,\n\t\t{other provider identifier issuer_48} as string,\n\t\t{other provider identifier_49} as string,\n\t\t{other provider identifier type code_49} as string,\n\t\t{other provider identifier state_49} as string,\n\t\t{other provider identifier issuer_49} as string,\n\t\t{other provider identifier_50} as string,\n\t\t{other provider identifier type code_50} as string,\n\t\t{other provider identifier state_50} as string,\n\t\t{other provider identifier issuer_50} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProviderOtherIdentifiers\nProviderTaxonomyMonth derive(current_flag = 1) ~> AddCurrentFlag\nAddCurrentFlag unpivot(output(\n\t\tname as string,\n\t\tvalue as string\n\t),\n\tungroupBy(current_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag}),\n\tlateral: false,\n\tignoreNullPivots: true) ~> Normalized\nFilter1 derive(name_standard = left(name,instr(name,'_')-1),\n\t\tposition = right(name,(length(name)-instr(name,'_')))) ~> RefineFieldNamePos\nRefineFieldNamePos pivot(groupBy(current_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tposition),\n\tpivotBy(name_standard),\n\t{} = first(value),\n\tcolumnNaming: '$N$V',\n\tlateral: true) ~> Pivot1\nProviderOtherIdentifiers derive(current_flag = 1) ~> AddCurrentFlagProvOtherID\nAddCurrentFlagProvOtherID unpivot(output(\n\t\tname as string,\n\t\tvalue as string\n\t),\n\tungroupBy(current_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag}),\n\tlateral: false,\n\tignoreNullPivots: true) ~> NormalizedProvOtherID\nFilter2 derive(name_standard = left(name,instr(name,'_')-1),\n\t\tposition = right(name,(length(name)-instr(name,'_')))) ~> RefineFieldNamePosProvOtherID\nRefineFieldNamePosProvOtherID pivot(groupBy(current_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tposition),\n\tpivotBy(name_standard),\n\t{} = first(value),\n\tcolumnNaming: '$N$V',\n\tlateral: true) ~> Pivot2\nPivot2 select(mapColumn(\n\t\teach(match(name!='position'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nNormalized filter(!(isNull(value) || value == '')) ~> Filter1\nNormalizedProvOtherID filter(!(isNull(value) || value == '')) ~> Filter2\nPivot1 sink(input(\n\t\tcurrent_flag as integer,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tposition as string,\n\t\t{healthcare provider primary taxonomy switch} as string,\n\t\t{healthcare provider taxonomy code} as string,\n\t\t{healthcare provider taxonomy group} as string,\n\t\t{provider license number} as string,\n\t\t{provider license number state code} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nSelect1 sink(input(\n\t\tcurrent_flag as integer,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\t{other provider identifier} as string,\n\t\t{other provider identifier issuer} as string,\n\t\t{other provider identifier state} as string,\n\t\t{other provider identifier type code} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_2b_Stage_NPPES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_2_Stage_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_2a_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "StageProviderTaxonomy"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NUCC_TAXONOMY",
								"type": "DatasetReference"
							},
							"name": "NUCCTaxonomy"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_1_ld_cms_nppes",
								"type": "DatasetReference"
							},
							"name": "NPPESProviderMain"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_0_raw_state_correction",
								"type": "DatasetReference"
							},
							"name": "InputStateCorrection"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_0_raw_country_correction",
								"type": "DatasetReference"
							},
							"name": "InputCountryCorrection"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_2b_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_2_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "LoadNPPESMainStage2a"
						}
					],
					"transformations": [
						{
							"name": "JoinTaxonomyCW"
						},
						{
							"name": "Select1"
						},
						{
							"name": "KeepPrimaryTaxonomy"
						},
						{
							"name": "IdentifyPrimaryTaxonomy"
						},
						{
							"name": "SortbyNPITaxonomy"
						},
						{
							"name": "AppendPrimaryTaxonomy"
						},
						{
							"name": "AddtlColumns"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "LookupCorrectedStatePracAddr"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "LookupCorrectedCountryPracAddr"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "LookupCorrrectedStateMailAddr"
						},
						{
							"name": "LookupCorrectedCountryMailAddr"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select8"
						},
						{
							"name": "Select9"
						}
					],
					"script": "source(output(\n\t\tcurrent_flag as integer,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tposition as string,\n\t\t{healthcare provider primary taxonomy switch} as string,\n\t\t{healthcare provider taxonomy code} as string,\n\t\t{healthcare provider taxonomy group} as string,\n\t\t{provider license number} as string,\n\t\t{provider license number state code} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StageProviderTaxonomy\nsource(output(\n\t\tcode as string,\n\t\tgrouping as string,\n\t\tclassification as string,\n\t\tspecialization as string,\n\t\tdefinition as string,\n\t\tnotes as string,\n\t\tyear as integer,\n\t\tcurrent_flag as integer,\n\t\t{effective date} as string,\n\t\t{deactivation date} as string,\n\t\t{last modified date} as string,\n\t\t{display name} as string,\n\t\t{right_effective date} as string,\n\t\t{right_deactivation date} as string,\n\t\t{right_last modified date} as string,\n\t\t{right_display name} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> NUCCTaxonomy\nsource(output(\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{healthcare provider taxonomy code_1} as string,\n\t\t{provider license number_1} as string,\n\t\t{provider license number state code_1} as string,\n\t\t{healthcare provider primary taxonomy switch_1} as string,\n\t\t{healthcare provider taxonomy code_2} as string,\n\t\t{provider license number_2} as string,\n\t\t{provider license number state code_2} as string,\n\t\t{healthcare provider primary taxonomy switch_2} as string,\n\t\t{healthcare provider taxonomy code_3} as string,\n\t\t{provider license number_3} as string,\n\t\t{provider license number state code_3} as string,\n\t\t{healthcare provider primary taxonomy switch_3} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider taxonomy group_1} as string,\n\t\t{healthcare provider taxonomy group_2} as string,\n\t\t{healthcare provider taxonomy group_3} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> NPPESProviderMain\nsource(output(\n\t\tdata_month as string,\n\t\tnpi as string,\n\t\taddress_line_1 as string,\n\t\taddress_line_2 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tpostal_code as string,\n\t\tcorrected_state as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> InputStateCorrection\nsource(output(\n\t\tdata_month as string,\n\t\tnpi as string,\n\t\taddress_line_1 as string,\n\t\taddress_line_2 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tpostal_code as string,\n\t\tcountry_code as string,\n\t\tcorrected_country as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> InputCountryCorrection\nStageProviderTaxonomy, NUCCTaxonomy join({healthcare provider taxonomy code} == code,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinTaxonomyCW\nJoinTaxonomyCW select(mapColumn(\n\t\tcurrent_flag = StageProviderTaxonomy@current_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\tposition,\n\t\thealthcare_provider_primary_taxonomy_switch = {healthcare provider primary taxonomy switch},\n\t\thealthcare_provider_taxonomy_code = {healthcare provider taxonomy code},\n\t\thealthcare_provider_group_taxonomy = {healthcare provider taxonomy group},\n\t\tprovider_license_number = {provider license number},\n\t\tprovider_license_number_state_code = {provider license number state code},\n\t\ttaxonomy_grouping = grouping,\n\t\ttaxonomy_classification = classification,\n\t\ttaxonomy_specialization = specialization\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nSelect1 filter(healthcare_provider_primary_taxonomy_switch=='Y') ~> KeepPrimaryTaxonomy\nSortbyNPITaxonomy aggregate(groupBy(npi),\n\teach(match(name!='npi'), $$ = first($$))) ~> IdentifyPrimaryTaxonomy\nKeepPrimaryTaxonomy sort(asc(npi, true),\n\tasc(position, true)) ~> SortbyNPITaxonomy\nSelect9, Select3 join(npi == temp_npi,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> AppendPrimaryTaxonomy\nSelect4 derive(current_flag = 1,\n\t\t{provider business practice location address state name} = iif({provider business practice location address state name}=='ALASKA','AK',\niif({provider business practice location address state name}=='ALABAMA','AL',\niif({provider business practice location address state name}=='ARKANSAS','AR',\niif({provider business practice location address state name}=='AMERICAN SAMOA','AS',\niif({provider business practice location address state name}=='ARIZONA','AZ',\niif({provider business practice location address state name}=='CA- CALIFORNIA','CA',\niif({provider business practice location address state name}=='CALIFORNIA','CA',\niif({provider business practice location address state name}=='LOS ANGELES','CA',\niif({provider business practice location address state name}=='COLORADO','CO',\niif({provider business practice location address state name}=='CONNECTICUT','CT',\niif({provider business practice location address state name}=='DISTRICT OF COLUMBIA','DC',\niif({provider business practice location address state name}=='DELAWARE','DE',\niif({provider business practice location address state name}=='FL - FLORIDA','FL',\niif({provider business practice location address state name}=='FLA','FL',\niif({provider business practice location address state name}=='FLORIDA','FL',\niif({provider business practice location address state name}=='MICRONESIA, FEDERATED STATES OF','FM',\niif({provider business practice location address state name}=='GEORGIA','GA',\niif({provider business practice location address state name}=='GUAM','GU',\niif({provider business practice location address state name}=='HAWAII','HI',\niif({provider business practice location address state name}=='IOWA','IA',\niif({provider business practice location address state name}=='IDAHO','ID',\niif({provider business practice location address state name}=='IL - ILLINOIS','IL',\niif({provider business practice location address state name}=='ILLINOIS','IL',\niif({provider business practice location address state name}=='INDIANA','IN',\niif({provider business practice location address state name}=='KANSAS','KS',\niif({provider business practice location address state name}=='KENTUCKY','KY',\niif({provider business practice location address state name}=='LOUISIANA','LA',\niif({provider business practice location address state name}=='NEW ORLEANS','LA',\niif({provider business practice location address state name}=='MA- MASSACHUSETTS','MA',\niif({provider business practice location address state name}=='MASSACHUSETTS','MA',\niif({provider business practice location address state name}=='MARYLAND','MD',\niif({provider business practice location address state name}=='MAINE','ME',\niif({provider business practice location address state name}=='MARSHALL ISLANDS','MH',\niif({provider business practice location address state name}=='MICHIGAN','MI',\niif({provider business practice location address state name}=='MINNESOTA','MN',\niif({provider business practice location address state name}=='MISSOURI','MO',\niif({provider business practice location address state name}=='MARIANA ISLANDS, NORTHERN','MP',\niif({provider business practice location address state name}=='MISSISSIPPI','MS',\niif({provider business practice location address state name}=='MS- MISSISSIPPI','MS',\niif({provider business practice location address state name}=='MONTANA','MT',\niif({provider business practice location address state name}=='N.C.','NC',\niif({provider business practice location address state name}=='NC - NORTH CAROLINA','NC',\niif({provider business practice location address state name}=='NORTH CAROLINA','NC',\niif({provider business practice location address state name}=='NORTH CAROLINA (NC)','NC',\niif({provider business practice location address state name}=='NORTH DAKOTA','ND',\niif({provider business practice location address state name}=='NEBRASKA','NE',\niif({provider business practice location address state name}=='NEW HAMPSHIRE','NH',\niif({provider business practice location address state name}=='NEW JERSEY','NJ',\niif({provider business practice location address state name}=='NJ - NEW JERSEY','NJ',\niif({provider business practice location address state name}=='NEW MEXICO','NM',\niif({provider business practice location address state name}=='NEVADA','NV',\niif({provider business practice location address state name}=='N.Y.','NY',\niif({provider business practice location address state name}=='NY - NEW YORK','NY',\niif({provider business practice location address state name}=='NY- NEW YORK','NY',\niif({provider business practice location address state name}=='NEW YORK','NY',\niif({provider business practice location address state name}=='OHIO','OH',\niif({provider business practice location address state name}=='OHIO (OH)','OH',\niif({provider business practice location address state name}=='OKLAHOMA','OK',\niif({provider business practice location address state name}=='OR OREGON','OR',\niif({provider business practice location address state name}=='OREGON','OR',\niif({provider business practice location address state name}=='PENNSYLVANIA','PA',\niif({provider business practice location address state name}=='P. R.','PR',\niif({provider business practice location address state name}=='P.R','PR',\niif({provider business practice location address state name}=='P.R.','PR',\niif({provider business practice location address state name}=='P.R. PUERTO RICO','PR',\niif({provider business practice location address state name}=='PR - PUERTO RICO','PR',\niif({provider business practice location address state name}=='PUERTO RICO','PR',\niif({provider business practice location address state name}=='PUERTORICO','PR',\niif({provider business practice location address state name}=='PALAU','PW',\niif({provider business practice location address state name}=='RHODE ISLAND','RI',\niif({provider business practice location address state name}=='SOUTH CAROLINA','SC',\niif({provider business practice location address state name}=='SOUTH DAKOTA','SD',\niif({provider business practice location address state name}=='TENNESSEE','TN',\niif({provider business practice location address state name}=='TEXAS','TX',\niif({provider business practice location address state name}=='TX-TEXAS','TX',\niif({provider business practice location address state name}=='U.T','UT',\niif({provider business practice location address state name}=='UTAH','UT',\niif({provider business practice location address state name}=='VIRGINIA','VA',\niif({provider business practice location address state name}=='VIRGIN ISLANDS','VI',\niif({provider business practice location address state name}=='VERMONT','VT',\niif({provider business practice location address state name}=='WASHINGTON','WA',\niif({provider business practice location address state name}=='WISCONSIN','WI',\niif({provider business practice location address state name}=='WEST VIRGINIA','WV',\niif({provider business practice location address state name}=='WYOMING','WY',\n{provider business practice location address state name}\n)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),\n\t\t{provider business mailing address state name} = iif({provider business mailing address state name}=='ALASKA','AK',\niif({provider business mailing address state name}=='ALABAMA','AL',\niif({provider business mailing address state name}=='ARKANSAS','AR',\niif({provider business mailing address state name}=='AMERICAN SAMOA','AS',\niif({provider business mailing address state name}=='ARIZONA','AZ',\niif({provider business mailing address state name}=='CA- CALIFORNIA','CA',\niif({provider business mailing address state name}=='CALIFORNIA','CA',\niif({provider business mailing address state name}=='LOS ANGELES','CA',\niif({provider business mailing address state name}=='COLORADO','CO',\niif({provider business mailing address state name}=='CONNECTICUT','CT',\niif({provider business mailing address state name}=='DISTRICT OF COLUMBIA','DC',\niif({provider business mailing address state name}=='DELAWARE','DE',\niif({provider business mailing address state name}=='FL - FLORIDA','FL',\niif({provider business mailing address state name}=='FLA','FL',\niif({provider business mailing address state name}=='FLORIDA','FL',\niif({provider business mailing address state name}=='MICRONESIA, FEDERATED STATES OF','FM',\niif({provider business mailing address state name}=='GEORGIA','GA',\niif({provider business mailing address state name}=='GUAM','GU',\niif({provider business mailing address state name}=='HAWAII','HI',\niif({provider business mailing address state name}=='IOWA','IA',\niif({provider business mailing address state name}=='IDAHO','ID',\niif({provider business mailing address state name}=='IL - ILLINOIS','IL',\niif({provider business mailing address state name}=='ILLINOIS','IL',\niif({provider business mailing address state name}=='INDIANA','IN',\niif({provider business mailing address state name}=='KANSAS','KS',\niif({provider business mailing address state name}=='KENTUCKY','KY',\niif({provider business mailing address state name}=='LOUISIANA','LA',\niif({provider business mailing address state name}=='NEW ORLEANS','LA',\niif({provider business mailing address state name}=='MA- MASSACHUSETTS','MA',\niif({provider business mailing address state name}=='MASSACHUSETTS','MA',\niif({provider business mailing address state name}=='MARYLAND','MD',\niif({provider business mailing address state name}=='MAINE','ME',\niif({provider business mailing address state name}=='MARSHALL ISLANDS','MH',\niif({provider business mailing address state name}=='MICHIGAN','MI',\niif({provider business mailing address state name}=='MINNESOTA','MN',\niif({provider business mailing address state name}=='MISSOURI','MO',\niif({provider business mailing address state name}=='MARIANA ISLANDS, NORTHERN','MP',\niif({provider business mailing address state name}=='MISSISSIPPI','MS',\niif({provider business mailing address state name}=='MS- MISSISSIPPI','MS',\niif({provider business mailing address state name}=='MONTANA','MT',\niif({provider business mailing address state name}=='N.C.','NC',\niif({provider business mailing address state name}=='NC - NORTH CAROLINA','NC',\niif({provider business mailing address state name}=='NORTH CAROLINA','NC',\niif({provider business mailing address state name}=='NORTH CAROLINA (NC)','NC',\niif({provider business mailing address state name}=='NORTH DAKOTA','ND',\niif({provider business mailing address state name}=='NEBRASKA','NE',\niif({provider business mailing address state name}=='NEW HAMPSHIRE','NH',\niif({provider business mailing address state name}=='NEW JERSEY','NJ',\niif({provider business mailing address state name}=='NJ - NEW JERSEY','NJ',\niif({provider business mailing address state name}=='NEW MEXICO','NM',\niif({provider business mailing address state name}=='NEVADA','NV',\niif({provider business mailing address state name}=='N.Y.','NY',\niif({provider business mailing address state name}=='NY - NEW YORK','NY',\niif({provider business mailing address state name}=='NY- NEW YORK','NY',\niif({provider business mailing address state name}=='NEW YORK','NY',\niif({provider business mailing address state name}=='OHIO','OH',\niif({provider business mailing address state name}=='OHIO (OH)','OH',\niif({provider business mailing address state name}=='OKLAHOMA','OK',\niif({provider business mailing address state name}=='OR OREGON','OR',\niif({provider business mailing address state name}=='OREGON','OR',\niif({provider business mailing address state name}=='PENNSYLVANIA','PA',\niif({provider business mailing address state name}=='P. R.','PR',\niif({provider business mailing address state name}=='P.R','PR',\niif({provider business mailing address state name}=='P.R.','PR',\niif({provider business mailing address state name}=='P.R. PUERTO RICO','PR',\niif({provider business mailing address state name}=='PR - PUERTO RICO','PR',\niif({provider business mailing address state name}=='PUERTO RICO','PR',\niif({provider business mailing address state name}=='PUERTORICO','PR',\niif({provider business mailing address state name}=='PALAU','PW',\niif({provider business mailing address state name}=='RHODE ISLAND','RI',\niif({provider business mailing address state name}=='SOUTH CAROLINA','SC',\niif({provider business mailing address state name}=='SOUTH DAKOTA','SD',\niif({provider business mailing address state name}=='TENNESSEE','TN',\niif({provider business mailing address state name}=='TEXAS','TX',\niif({provider business mailing address state name}=='TX-TEXAS','TX',\niif({provider business mailing address state name}=='U.T','UT',\niif({provider business mailing address state name}=='UTAH','UT',\niif({provider business mailing address state name}=='VIRGINIA','VA',\niif({provider business mailing address state name}=='VIRGIN ISLANDS','VI',\niif({provider business mailing address state name}=='VERMONT','VT',\niif({provider business mailing address state name}=='WASHINGTON','WA',\niif({provider business mailing address state name}=='WISCONSIN','WI',\niif({provider business mailing address state name}=='WEST VIRGINIA','WV',\niif({provider business mailing address state name}=='WYOMING','WY',\n{provider business mailing address state name}\n))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ~> AddtlColumns\nIdentifyPrimaryTaxonomy select(mapColumn(\n\t\ttemp_npi = npi,\n\t\t{healthcare provider primary taxonomy code} = healthcare_provider_taxonomy_code,\n\t\t{healthcare provider primary group taxonomy} = healthcare_provider_group_taxonomy,\n\t\t{provider primary license number} = provider_license_number,\n\t\t{provider primary license number state code} = provider_license_number_state_code,\n\t\tprimary_taxonomy_grouping = taxonomy_grouping,\n\t\tprimary_taxonomy_classification = taxonomy_classification,\n\t\tprimary_taxonomy_specialization = taxonomy_specialization\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nAppendPrimaryTaxonomy select(mapColumn(\n\t\teach(match(upper(name)!='TEMP_NPI'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nInputStateCorrection select(mapColumn(\n\t\tselect5_npi = npi,\n\t\taddress_line_1,\n\t\taddress_line_2,\n\t\tcity,\n\t\tpostal_code,\n\t\tcorrected_state\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nAddtlColumns, Select5 lookup(npi == select5_npi\n\t&& {provider first line business practice location address} == address_line_1\n\t&& {provider second line business practice location address} == address_line_2\n\t&& {provider business practice location address city name} == city\n\t&& {provider business practice location address postal code} == postal_code,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCorrectedStatePracAddr\nLookupCorrectedCountryPracAddr derive({provider business practice location address state name} = iif(isNull(corrected_state), {provider business practice location address state name}, corrected_state),\n\t\t{provider business practice location address country code out us} = iif(isNull(corrected_country), {provider business practice location address country code out us}, corrected_country)) ~> DerivedColumn1\nLookupCorrectedStatePracAddr, Select6 lookup(npi == select6_npi\n\t&& {provider first line business practice location address} == Select6@address_line_1\n\t&& {provider second line business practice location address} == Select6@address_line_2\n\t&& {provider business practice location address city name} == Select6@city\n\t&& {provider business practice location address postal code} == Select6@postal_code\n\t&& {provider business practice location address state name} == state,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCorrectedCountryPracAddr\nInputCountryCorrection select(mapColumn(\n\t\tselect6_npi = npi,\n\t\taddress_line_1,\n\t\taddress_line_2,\n\t\tcity,\n\t\tstate,\n\t\tpostal_code,\n\t\tcorrected_country\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nDerivedColumn1 select(mapColumn(\n\t\teach(match(!in(['select5_npi','select6_npi','address_line_1','address_line_2','city','postal_code','state','corrected_state','corrected_country'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nSelect7, Select5 lookup(npi == select5_npi\n\t&& {provider first line business mailing address} == address_line_1\n\t&& {provider second line business mailing address} == address_line_2\n\t&& {provider business mailing address city name} == city\n\t&& {provider business mailing address postal code} == postal_code,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCorrrectedStateMailAddr\nLookupCorrrectedStateMailAddr, Select6 lookup(npi == select6_npi\n\t&& {provider first line business mailing address} == Select6@address_line_1\n\t&& {provider second line business mailing address} == Select6@address_line_2\n\t&& {provider business mailing address city name} == Select6@city\n\t&& {provider business mailing address postal code} == Select6@postal_code\n\t&& {provider business mailing address state name} == state,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCorrectedCountryMailAddr\nLookupCorrectedCountryMailAddr derive({provider business mailing address state name} = iif(isNull(corrected_state), {provider business mailing address state name}, corrected_state),\n\t\t{provider business mailing address country code (if outside u.s.) } = iif(isNull(corrected_country), {provider business mailing address country code (if outside u.s.) }, corrected_country)) ~> DerivedColumn2\nDerivedColumn2 select(mapColumn(\n\t\teach(match(!in(['select5_npi','select6_npi','address_line_1','address_line_2','city','postal_code','state','corrected_state','corrected_country'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nNPPESProviderMain select(mapColumn(\n\t\teach(match(!startsWith(upper(name),'HEALTHCARE PROVIDER TAXONOMY CODE_')&&!startsWith(upper(name),'PROVIDER LICENSE NUMBER_')&&!startsWith(upper(name),'PROVIDER LICENSE NUMBER STATE CODE_')&&!startsWith(upper(name),'HEALTHCARE PROVIDER PRIMARY TAXONOMY SWITCH_')&&!startsWith(upper(name),'HEALTHCARE PROVIDER TAXONOMY GROUP_')))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select9\nSelect1 sink(input(\n\t\tcurrent_flag as integer,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tposition as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\thealthcare_provider_group_taxonomy as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nSelect8 sink(input(\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string,\n\t\tcurrent_flag as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> LoadNPPESMainStage2a"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_3_Stage_NPPES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_2_Stage_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_2_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesMain"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_MAIN",
								"type": "DatasetReference"
							},
							"name": "ProdCmsNppesMain"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectNPPESMainCurrent"
						},
						{
							"name": "ProdNPPESMainCurrent"
						},
						{
							"name": "SelectProdNPPESMainCurrent"
						}
					],
					"script": "source(output(\n\t\tnpi as string,\n\t\tdata_month as string,\n\t\t{active flag} as integer,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string,\n\t\tcurrent_flag as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCmsNppesMain\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.)} as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{active flag} as string,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProdCmsNppesMain\nStCmsNppesMain select(mapColumn(\n\t\teach(match(!in([upper('current_flag'),upper('data_month')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNPPESMainCurrent\nProdCmsNppesMain filter(current_flag=='1') ~> ProdNPPESMainCurrent\nProdNPPESMainCurrent select(mapColumn(\n\t\teach(match(!in([upper('current_flag'),upper('data_month')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProdNPPESMainCurrent\nSelectNPPESMainCurrent sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DA_Test_Loop_SQL_Query')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "dataflow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DA_TEST_Execute_SQL_Query",
											"type": "DataFlowReference",
											"parameters": {
												"sql_query": {
													"value": "'@{item().query}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"data_year": "2021"
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "BLOB_XLS_TEST_SQL_LOOP",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_NPPES_PROCESS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PUF_DF_2a_Stage_NPPES",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_2a_Stage_NPPES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProviderTaxonomyMonth": {},
									"ProviderOtherIdentifiers": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime-TEST2",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_2b_Stage_NPPES_copy1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_2a_Stage_NPPES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_2b_Stage_NPPES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageProviderTaxonomy": {},
									"NUCCTaxonomy": {},
									"NPPESProviderMain": {},
									"InputStateCorrection": {},
									"InputCountryCorrection": {},
									"sink1": {},
									"LoadNPPESMainStage2a": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime-TEST2",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "PUF_NPPES"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T03:56:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PUF_DF_2a_Stage_NPPES')]",
				"[concat(variables('factoryId'), '/dataflows/PUF_DF_2b_Stage_NPPES')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Readin_NUCC_Taxonomy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Initial_Load_NUCC_Taxonomy",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "A0_Initial_Load_NUCC_Taxonomy",
								"type": "DataFlowReference",
								"parameters": {
									"nucc_year_raw_file_suffix": {
										"value": "'@{pipeline().parameters.nucc_year_raw_file_suffix}'",
										"type": "Expression"
									},
									"data_year": {
										"value": "'@{pipeline().parameters.data_year}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadinRawNUCCTaxonomy": {},
									"LoadToSQL": {
										"data_year": {
											"value": "@pipeline().parameters.data_year",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test3",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"parameters": {
					"nucc_year_raw_file_suffix": {
						"type": "string"
					},
					"data_year": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PUF_NUCC"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-19T03:20:52Z"
			},
			"dependsOn": []
		}
	]
}