{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "qral-df-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PUF_DF_3_Stage_NPPES_Provider_Taxonomy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PUF_2_Stage_NPPES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_DS_2_st_cms_nppes_main",
								"type": "DatasetReference"
							},
							"name": "StCmsNppesMain"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_PROD_NPPES_PROVIDER_TAXONOMY",
								"type": "DatasetReference"
							},
							"name": "ProdCmsNppesProvTaxonomy"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_2b_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "StCMSNPPESProvTaxonomy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PUF_DS_3_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ProdNPPESProvTaxonomyCurrent"
						},
						{
							"name": "StNPPESMainActive"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "StNPPESMainActiveNPI"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "Select2"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "Lookup"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "NewNPIProvTaxonomyFinal"
						},
						{
							"name": "InBothStOtherProvID"
						},
						{
							"name": "InBothProdOtherProvID"
						},
						{
							"name": "StCMSNPPESProvTaxonomySelect"
						},
						{
							"name": "NPIInBothNewData"
						},
						{
							"name": "NPIInBothNewDataFinal"
						},
						{
							"name": "NPIInBothOldData"
						},
						{
							"name": "NPIInBothOldDataFinal"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SetOldDataToActiveFlag0"
						},
						{
							"name": "SetOldDataToCurrentFlag0"
						},
						{
							"name": "NPIOldDataActiveFlag0Final"
						},
						{
							"name": "NPIOldDataCurrentFlag0Final"
						},
						{
							"name": "NewChangeDataFinal"
						},
						{
							"name": "Select6"
						},
						{
							"name": "KeepOldDataFinal"
						},
						{
							"name": "FinalData"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Select8"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Select9"
						}
					],
					"script": "source(output(\n\t\tcurrent_flag as string,\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCmsNppesMain\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_group_taxonomy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ProdCmsNppesProvTaxonomy\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tposition as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\thealthcare_provider_group_taxonomy as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StCMSNPPESProvTaxonomy\nProdCmsNppesProvTaxonomy filter(current_flag=='1') ~> ProdNPPESProvTaxonomyCurrent\nStCmsNppesMain filter({active flag}=='1') ~> StNPPESMainActive\nStNPPESMainActive aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\teach(match(in([('npi')],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StNPPESMainActiveNPI\nStCMSNPPESProvTaxonomySelect aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> Aggregate2\nAggregate2 select(mapColumn(\n\t\ttemp_npi = npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, Select2 join(temp_npi == npi_prod,\n\tjoinType:'outer',\n\tbroadcast: 'auto')~> Join1\nProdNPPESProvTaxonomyCurrent aggregate(groupBy(npi),\n\ttemp = count(npi)) ~> Aggregate3\nAggregate3 select(mapColumn(\n\t\tnpi_prod = npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nJoin1 split(isNull(npi_prod),\n\ttemp_npi==npi_prod,\n\tdisjoint: true) ~> ConditionalSplit1@(NewNPI, InBoth, OldNPI)\nSelect3, StCMSNPPESProvTaxonomySelect lookup(temp_npi == npi,\n\tmultiple: true,\n\tbroadcast: 'auto')~> Lookup\nConditionalSplit1@NewNPI select(mapColumn(\n\t\ttemp_npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nConditionalSplit1@InBoth select(mapColumn(\n\t\ttemp_npi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nConditionalSplit1@OldNPI select(mapColumn(\n\t\ttemp_npi = npi_prod\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nLookup select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NewNPIProvTaxonomyFinal\nSelect4, StCMSNPPESProvTaxonomySelect lookup(temp_npi == npi,\n\tmultiple: true,\n\tbroadcast: 'auto')~> InBothStOtherProvID\nSelect4, ProdNPPESProvTaxonomyCurrent lookup(temp_npi == npi,\n\tmultiple: true,\n\tbroadcast: 'auto')~> InBothProdOtherProvID\nStCMSNPPESProvTaxonomy select(mapColumn(\n\t\teach(match(upper(name)!='POSITION'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StCMSNPPESProvTaxonomySelect\nSelect8, DerivedColumn2 exists(Compare_key_ProdProvTaxonomy == Compare_key_StProvTaxonomy,\n\tnegate:true,\n\tbroadcast: 'auto')~> NPIInBothNewData\nNPIInBothNewData select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIInBothNewDataFinal\nSelect7, DerivedColumn3 exists(Compare_key_StProvTaxonomy == Compare_key_ProdProvTaxonomy,\n\tnegate:true,\n\tbroadcast: 'auto')~> NPIInBothOldData\nDerivedColumn1 select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_taxonomy_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_group_taxonomy\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIInBothOldDataFinal\nNPIInBothOldData derive(current_flag = '0') ~> DerivedColumn1\nSelect5, StNPPESMainActiveNPI exists(temp_npi == npi,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1, StCMSNPPESProvTaxonomySelect lookup(temp_npi == npi,\n\tmultiple: true,\n\tbroadcast: 'auto')~> Lookup1\nLookup1 filter({active flag}=='1') ~> Filter1\nFilter1 derive({active flag} = '0') ~> SetOldDataToActiveFlag0\nFilter1 derive(current_flag = '0') ~> SetOldDataToCurrentFlag0\nSetOldDataToActiveFlag0 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIOldDataActiveFlag0Final\nSetOldDataToCurrentFlag0 select(mapColumn(\n\t\tnpi = temp_npi,\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NPIOldDataCurrentFlag0Final\nNewNPIProvTaxonomyFinal, NPIInBothNewDataFinal, NPIInBothOldDataFinal, NPIOldDataActiveFlag0Final, NPIOldDataCurrentFlag0Final union(byName: true)~> NewChangeDataFinal\nDerivedColumn5 select(mapColumn(\n\t\teach(match(name!='current_flag'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nDerivedColumn4, Select6 exists(Prod_Compare_Key == OldData_CompareKey,\n\tnegate:true,\n\tbroadcast: 'auto')~> KeepOldDataFinal\nSelect9, NewChangeDataFinal union(byName: true)~> FinalData\nDerivedColumn2 select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_taxonomy_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_group_taxonomy,\n\t\tCompare_key_StProvTaxonomy\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nDerivedColumn3 select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization,\n\t\tCompare_key_ProdProvTaxonomy\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nInBothProdOtherProvID derive(Compare_key_StProvTaxonomy = upper(concat(iifNull(npi,''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(healthcare_provider_taxonomy_code,''),iifNull(taxonomy_grouping,''),\r\niifNull(taxonomy_classification,''),iifNull(taxonomy_specialization,''),iifNull(provider_license_number,''),iifNull(provider_license_number_state_code,''),\r\niifNull(healthcare_provider_primary_taxonomy_switch,''),iifNull(healthcare_provider_group_taxonomy,'')))) ~> DerivedColumn2\nInBothStOtherProvID derive(Compare_key_ProdProvTaxonomy = upper(concat(iifNull(npi,''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(healthcare_provider_taxonomy_code,''),iifNull(taxonomy_grouping,''),\r\niifNull(taxonomy_classification,''),iifNull(taxonomy_specialization,''),iifNull(provider_license_number,''),iifNull(provider_license_number_state_code,''),\r\niifNull(healthcare_provider_primary_taxonomy_switch,''),iifNull(healthcare_provider_group_taxonomy,'')))) ~> DerivedColumn3\nProdCmsNppesProvTaxonomy derive(Prod_Compare_Key = upper(concat(iifNull(toString(data_month),''),iifNull(npi,''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(healthcare_provider_taxonomy_code,''),\r\niifNull(taxonomy_grouping,''),iifNull(taxonomy_classification,''),iifNull(taxonomy_specialization,''),iifNull(provider_license_number,''),\r\niifNull(provider_license_number_state_code,''),iifNull(healthcare_provider_primary_taxonomy_switch,''),iifNull(healthcare_provider_group_taxonomy,'')))) ~> DerivedColumn4\nNewChangeDataFinal derive(OldData_CompareKey = upper(concat(iifNull(toString(data_month),''),iifNull(npi,''),iifNull({entity type code},''),iifNull({active flag},''),iifNull(healthcare_provider_taxonomy_code,''),\r\niifNull(taxonomy_grouping,''),iifNull(taxonomy_classification,''),iifNull(taxonomy_specialization,''),iifNull(provider_license_number,''),\r\niifNull(provider_license_number_state_code,''),iifNull(healthcare_provider_primary_taxonomy_switch,''),iifNull(healthcare_provider_group_taxonomy,'')))) ~> DerivedColumn5\nKeepOldDataFinal select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_taxonomy_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_group_taxonomy\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select9\nFinalData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_group_taxonomy as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DA_Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_temp",
								"type": "DatasetReference"
							},
							"name": "Redshift"
						},
						{
							"dataset": {
								"referenceName": "PUF_DS_2b_st_cms_nppes_provider_taxonomy",
								"type": "DatasetReference"
							},
							"name": "Azure"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Exists2"
						}
					],
					"script": "source(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_group_taxonomy as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Redshift\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tposition as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\thealthcare_provider_group_taxonomy as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Azure\nAzure, Redshift exists(Azure@npi == Redshift@npi,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists2\nExists2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DA_Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PUF_temp_a",
								"type": "DatasetReference"
							},
							"name": "tempa"
						},
						{
							"dataset": {
								"referenceName": "PUF_temp_b",
								"type": "DatasetReference"
							},
							"name": "tempb"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						}
					],
					"script": "source(output(\n\t\ttemp_int as integer,\n\t\ttemp_var as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> tempa\nsource(output(\n\t\ttemp_int_b as integer,\n\t\ttemp_var_b as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> tempb\ntempa, tempb join(temp_int == temp_int_b,\n\tjoinType:'outer',\n\tbroadcast: 'auto')~> Join1\nJoin1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_to_stage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "AM_test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_azure_sql_dev",
								"type": "DatasetReference"
							},
							"name": "landingTableSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_azure_sql_dev",
								"type": "DatasetReference"
							},
							"name": "writeDataToStage"
						}
					],
					"transformations": [
						{
							"name": "addLoaddate"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> landingTableSource\nlandingTableSource derive(load_date = currentTimestamp(),\n\t\tcurrent_flag = 1) ~> addLoaddate\naddLoaddate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> writeDataToStage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DA_Test_Loop_SQL_Query')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_QC_ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Readin_QC_List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Readin_QC_List').output",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Run_QC_SQL",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DA_TEST_Execute_SQL_Query",
											"type": "DataFlowReference",
											"parameters": {
												"sql_query": {
													"value": "'@{item().query}'",
													"type": "Expression"
												},
												"qc_id": {
													"value": "@item().query_number",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"data_year": "2021"
												},
												"sink1": {}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime-TEST2",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Readin_QC_List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "BLOB_XLS_TEST_SQL_LOOP",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-14T17:49:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_NPPES_Monthly_Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PUF_DF_2a_Stage_NPPES",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_2a_Stage_NPPES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProviderTaxonomyMonth": {},
									"ProviderOtherIdentifiers": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PUF_NPPES"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-09T15:09:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_NPPES_Monthly_Update_Process_Jobrun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PUF_DF_1_Load_NPPES_Month",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_1_Load_NPPES_Month",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawCMSNPPESMonth": {},
									"sinkNPPESMain": {},
									"sinkNPPESOtherProvider": {},
									"sinkProviderTaxonomy": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_2a_Stage_NPPES",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_1_Load_NPPES_Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_2a_Stage_NPPES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProviderTaxonomyMonth": {},
									"ProviderOtherIdentifiers": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_2b_Stage_NPPES",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_2a_Stage_NPPES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_2b_Stage_NPPES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageProviderTaxonomy": {},
									"NUCCTaxonomy": {},
									"NPPESProviderMain": {},
									"InputStateCorrection": {},
									"InputCountryCorrection": {},
									"StageOtherProvID": {},
									"sink1": {},
									"LoadNPPESMainStage2a": {},
									"sinkStNPPESProvOtherID": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_3_Stage_NPPES_Main",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_2b_Stage_NPPES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_3_Stage_NPPES_Main",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StCmsNppesMain": {},
									"ProdCmsNppesMain": {},
									"SinkNPPESMain": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_3_Stage_NPPES_Other_Provider_Identifier",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_2b_Stage_NPPES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_3_Stage_NPPES_Other_Provider_Identifier",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StCmsNppesMain": {},
									"ProdCmsNppesOtherProviderID": {},
									"StCMSNPPESOtherProvID": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_3_Stage_NPPES_Provider_Taxonomy",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_2b_Stage_NPPES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_3_Stage_NPPES_Provider_Taxonomy",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StCmsNppesMain": {},
									"ProdCmsNppesProvTaxonomy": {},
									"StCMSNPPESProvTaxonomy": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PUF_NPPES"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T03:52:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PUF_DF_3_Stage_NPPES_Provider_Taxonomy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Readin_NUCC_Taxonomy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Initial_Load_NUCC_Taxonomy",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "A0_Initial_Load_NUCC_Taxonomy",
								"type": "DataFlowReference",
								"parameters": {
									"nucc_year_raw_file_suffix": {
										"value": "'@{pipeline().parameters.nucc_year_raw_file_suffix}'",
										"type": "Expression"
									},
									"data_year": {
										"value": "'@{pipeline().parameters.data_year}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadinRawNUCCTaxonomy": {},
									"LoadToSQL": {
										"data_year": {
											"value": "@pipeline().parameters.data_year",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test3",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"nucc_year_raw_file_suffix": {
						"type": "string"
					},
					"data_year": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PUF_NUCC"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-19T03:20:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Redshift": {},
									"Azure": {},
									"sink1": {
										"schemaName": "temp",
										"tableName": "compare_prov_taxonomy"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-20T22:40:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tempa": {},
									"tempb": {},
									"sink1": {
										"schemaName": "temp",
										"tableName": "a_b_join"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-20T23:17:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PUF_DF_3_Stage_NPPES_Other_Provider_Identifier",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_3_Stage_NPPES_Main",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_3_Stage_NPPES_Other_Provider_Identifier",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StCmsNppesMain": {},
									"ProdCmsNppesOtherProviderID": {},
									"StCMSNPPESOtherProvID": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1-Test4-16cores",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_3_Stage_NPPES_Main",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PUF_DF_2b_Stage_NPPES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_3_Stage_NPPES_Main",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StCmsNppesMain": {},
									"ProdCmsNppesMain": {},
									"SinkNPPESMain": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PUF_DF_2b_Stage_NPPES",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PUF_DF_2b_Stage_NPPES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageProviderTaxonomy": {},
									"NUCCTaxonomy": {},
									"NPPESProviderMain": {},
									"InputStateCorrection": {},
									"InputCountryCorrection": {},
									"StageOtherProvID": {},
									"sink1": {},
									"LoadNPPESMainStage2a": {},
									"sinkStNPPESProvOtherID": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DA_Test"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-24T23:19:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_load_to_stage_zip_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_copy_landing_to_staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_to_stage",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"landingTableSource": {
										"tableName": {
											"value": "@pipeline().parameters.landingTableName",
											"type": "Expression"
										},
										"schemaName": {
											"value": "@pipeline().parameters.landingSchemaName",
											"type": "Expression"
										}
									},
									"writeDataToStage": {
										"tableName": {
											"value": "@pipeline().parameters.stageTableName",
											"type": "Expression"
										},
										"schemaName": {
											"value": "@pipeline().parameters.stageSchemaName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "deleteSourceZipFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "df_copy_landing_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_read_raw_file",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@pipeline().parameters.sourceFileContainerName",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.sourceFileName",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "QralStorageDev_Blob",
									"type": "LinkedServiceReference"
								},
								"path": "logs"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ZipCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "zipcode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "state",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Latitude",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "latitude",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "Longitude",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "longitude",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "Classification",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "classification",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Population",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "population",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_read_raw_file",
								"type": "DatasetReference",
								"parameters": {
									"containerName": {
										"value": "@pipeline().parameters.sourceFileContainerName",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.sourceFileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_Qral_Dev_Table",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": {
										"value": "@pipeline().parameters.landingSchemaName",
										"type": "Expression"
									},
									"tableName": {
										"value": "@pipeline().parameters.landingTableName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"stageSchemaName": {
						"type": "string"
					},
					"stageTableName": {
						"type": "string"
					},
					"sourceFileContainerName": {
						"type": "string"
					},
					"sourceFileName": {
						"type": "string"
					},
					"landingTableName": {
						"type": "string"
					},
					"landingSchemaName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "AM_Test"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_load_to_stage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PUF_NPPES_Process_Main_Jobrun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Email_Successful_Pipeline",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute PUF NPPES Monthly Update Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-19.eastus2.logic.azure.com:443/workflows/c0dbe0ef6af14d8389b9723475d9d61d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=GXLOylKVKZwbhRg4sascQL6I6efKXy_yK-CSbN6lF8Y",
							"connectVia": {
								"referenceName": "integrationRuntime1-Test3",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"title\": \"PIPELINE RUN FINISHED!\",\n\"message\": \"DEMO-PIPELINE FINISHED RUNNING SUCCESSFULLY!\",\n\"color\": \"Green\",\n\"dataFactoryName\":\"@{pipeline().DataFactory}\",\n\"pipelineName\":\"@{pipeline().Pipeline}\",\n\"pipelineRunId\":\"@{pipeline().RunId}\",\n\"time\":\"@{utcnow()}\"\n}",
								"type": "Expression"
							},
							"datasets": [
								{
									"referenceName": "PUF_DS_PROD_NUCC_TAXONOMY",
									"type": "DatasetReference",
									"parameters": {}
								}
							]
						}
					},
					{
						"name": "Email_Fail_Pipeline",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute PUF NPPES Monthly Update Process",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-19.eastus2.logic.azure.com:443/workflows/c0dbe0ef6af14d8389b9723475d9d61d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=GXLOylKVKZwbhRg4sascQL6I6efKXy_yK-CSbN6lF8Y",
							"connectVia": {
								"referenceName": "integrationRuntime1-Test3",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"title\": \"PIPELINE FAILED!\",\n\"message\": \"DEMO-PIPELINE FAILED RUNNING!\",\n\"color\": \"Red\",\n\"dataFactoryName\":\"@{pipeline().DataFactory}\",\n\"pipelineName\":\"@{pipeline().Pipeline}\",\n\"pipelineRunId\":\"@{pipeline().RunId}\",\n\"time\":\"@{utcnow()}\"\n}",
								"type": "Expression"
							},
							"datasets": [
								{
									"referenceName": "PUF_DS_PROD_NUCC_TAXONOMY",
									"type": "DatasetReference",
									"parameters": {}
								}
							]
						}
					},
					{
						"name": "Execute PUF NPPES Monthly Update Process",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PUF_NPPES_Monthly_Update_Process_Jobrun",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PUF_NPPES"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-18T01:28:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PUF_NPPES_Monthly_Update_Process_Jobrun')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NPPES_Trigger_Test')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PUF_NPPES_Process_Main_Jobrun",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 60,
						"startTime": "2021-06-24T02:05:00",
						"endTime": "2021-06-24T02:15:00",
						"timeZone": "Central Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PUF_NPPES_Process_Main_Jobrun')]"
			]
		}
	]
}