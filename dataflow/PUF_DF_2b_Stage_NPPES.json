{
	"name": "PUF_DF_2b_Stage_NPPES",
	"properties": {
		"folder": {
			"name": "PUF_2_Stage_NPPES"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PUF_DS_2a_st_cms_nppes_provider_taxonomy",
						"type": "DatasetReference"
					},
					"name": "StageProviderTaxonomy"
				},
				{
					"dataset": {
						"referenceName": "PUF_DS_PROD_NUCC_TAXONOMY",
						"type": "DatasetReference"
					},
					"name": "NUCCTaxonomy"
				},
				{
					"dataset": {
						"referenceName": "PUF_DS_1_ld_cms_nppes",
						"type": "DatasetReference"
					},
					"name": "NPPESProviderMain"
				},
				{
					"dataset": {
						"referenceName": "PUF_DS_0_raw_state_correction",
						"type": "DatasetReference"
					},
					"name": "InputStateCorrection"
				},
				{
					"dataset": {
						"referenceName": "PUF_DS_0_raw_country_correction",
						"type": "DatasetReference"
					},
					"name": "InputCountryCorrection"
				},
				{
					"dataset": {
						"referenceName": "PUF_DS_2a_st_cms_nppes_other_provider_identifier",
						"type": "DatasetReference"
					},
					"name": "StageOtherProvID"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "PUF_DS_2b_st_cms_nppes_provider_taxonomy",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "PUF_DS_2_st_cms_nppes_main",
						"type": "DatasetReference"
					},
					"name": "LoadNPPESMainStage2a"
				},
				{
					"dataset": {
						"referenceName": "PUF_DS_2b_st_cms_nppes_other_provider_identifier",
						"type": "DatasetReference"
					},
					"name": "sinkStNPPESProvOtherID"
				},
				{
					"dataset": {
						"referenceName": "Azure_Qral_Dev_Table",
						"type": "DatasetReference"
					},
					"name": "testCorrectedCountryPractice"
				},
				{
					"dataset": {
						"referenceName": "Azure_Qral_Dev_Table",
						"type": "DatasetReference"
					},
					"name": "testCorrectedCountryMailing"
				}
			],
			"transformations": [
				{
					"name": "JoinTaxonomyCW"
				},
				{
					"name": "Select1"
				},
				{
					"name": "KeepPrimaryTaxonomy"
				},
				{
					"name": "IdentifyPrimaryTaxonomy"
				},
				{
					"name": "SortbyNPITaxonomy"
				},
				{
					"name": "AppendPrimaryTaxonomy"
				},
				{
					"name": "AddtlColumns"
				},
				{
					"name": "Select3"
				},
				{
					"name": "Select4"
				},
				{
					"name": "Select5"
				},
				{
					"name": "LookupCorrectedStatePracAddr"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "LookupCorrectedCountryPracAddr"
				},
				{
					"name": "Select6"
				},
				{
					"name": "Select7"
				},
				{
					"name": "LookupCorrrectedStateMailAddr"
				},
				{
					"name": "LookupCorrectedCountryMailAddr"
				},
				{
					"name": "DerivedColumn2"
				},
				{
					"name": "Select8"
				},
				{
					"name": "Select9"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "Select10"
				},
				{
					"name": "Aggregate2"
				},
				{
					"name": "Select11"
				},
				{
					"name": "CreateStateCorrectionKey"
				},
				{
					"name": "CreateCountrycorrectionKey"
				}
			],
			"script": "source(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\tposition as string,\n\t\t{healthcare provider primary taxonomy switch} as string,\n\t\t{healthcare provider taxonomy code} as string,\n\t\t{healthcare provider taxonomy group} as string,\n\t\t{provider license number} as string,\n\t\t{provider license number state code} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StageProviderTaxonomy\nsource(output(\n\t\tcode as string,\n\t\tgrouping as string,\n\t\tclassification as string,\n\t\tspecialization as string,\n\t\tdefinition as string,\n\t\tnotes as string,\n\t\tyear as integer,\n\t\tcurrent_flag as integer,\n\t\t{effective date} as string,\n\t\t{deactivation date} as string,\n\t\t{last modified date} as string,\n\t\t{display name} as string,\n\t\t{right_effective date} as string,\n\t\t{right_deactivation date} as string,\n\t\t{right_last modified date} as string,\n\t\t{right_display name} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> NUCCTaxonomy\nsource(output(\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{healthcare provider taxonomy code_1} as string,\n\t\t{provider license number_1} as string,\n\t\t{provider license number state code_1} as string,\n\t\t{healthcare provider primary taxonomy switch_1} as string,\n\t\t{healthcare provider taxonomy code_2} as string,\n\t\t{provider license number_2} as string,\n\t\t{provider license number state code_2} as string,\n\t\t{healthcare provider primary taxonomy switch_2} as string,\n\t\t{healthcare provider taxonomy code_3} as string,\n\t\t{provider license number_3} as string,\n\t\t{provider license number state code_3} as string,\n\t\t{healthcare provider primary taxonomy switch_3} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider taxonomy group_1} as string,\n\t\t{healthcare provider taxonomy group_2} as string,\n\t\t{healthcare provider taxonomy group_3} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> NPPESProviderMain\nsource(output(\n\t\tdata_month as string,\n\t\tnpi as string,\n\t\taddress_line_1 as string,\n\t\taddress_line_2 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tpostal_code as string,\n\t\tcorrected_state as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> InputStateCorrection\nsource(output(\n\t\tdata_month as string,\n\t\tnpi as string,\n\t\taddress_line_1 as string,\n\t\taddress_line_2 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tpostal_code as string,\n\t\tcountry_code as string,\n\t\tcorrected_country as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> InputCountryCorrection\nsource(output(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\t{other provider identifier} as string,\n\t\t{other provider identifier issuer} as string,\n\t\t{other provider identifier state} as string,\n\t\t{other provider identifier type code} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StageOtherProvID\nAggregate1, NUCCTaxonomy join({healthcare provider taxonomy code} == code,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinTaxonomyCW\nJoinTaxonomyCW select(mapColumn(\n\t\tcurrent_flag = Aggregate1@current_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch = {healthcare provider primary taxonomy switch},\n\t\thealthcare_provider_taxonomy_code = {healthcare provider taxonomy code},\n\t\thealthcare_provider_group_taxonomy = {healthcare provider taxonomy group},\n\t\tprovider_license_number = {provider license number},\n\t\tprovider_license_number_state_code = {provider license number state code},\n\t\ttaxonomy_grouping = grouping,\n\t\ttaxonomy_classification = classification,\n\t\ttaxonomy_specialization = specialization,\n\t\tposition\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nSelect1 filter(healthcare_provider_primary_taxonomy_switch=='Y') ~> KeepPrimaryTaxonomy\nSortbyNPITaxonomy aggregate(groupBy(npi),\n\teach(match(name!='npi'), $$ = first($$))) ~> IdentifyPrimaryTaxonomy\nKeepPrimaryTaxonomy sort(asc(npi, true),\n\tasc(position, true)) ~> SortbyNPITaxonomy\nSelect9, Select3 join(npi == temp_npi,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> AppendPrimaryTaxonomy\nSelect4 derive(business_practice_address_state_correct_key = upper(concat(npi,iifNull({provider first line business practice location address},\"\"),iifNull({provider second line business practice location address},\"\"),iifNull({provider business practice location address city name},\"\"),iifNull({provider business practice location address postal code},\"\"))),\n\t\tbusiness_mailing_address_state_correct_key = upper(concat(npi,iifNull({provider first line business mailing address},\"\"),iifNull({provider second line business mailing address},\"\"),iifNull({provider business mailing address city name},\"\"),iifNull({provider business mailing address postal code},\"\"))),\n\t\tbusiness_practice_address_country_correct_key = upper(concat(npi,iifNull({provider first line business practice location address},\"\"),iifNull({provider second line business practice location address},\"\"),iifNull({provider business practice location address city name},\"\"),iifNull({provider business practice location address postal code},\"\"),iifNull({provider business practice location address state name},\"\"))),\n\t\tbusiness_mailing_address_country_correct_key = upper(concat(npi,iifNull({provider first line business mailing address},\"\"),iifNull({provider second line business mailing address},\"\"),iifNull({provider business mailing address city name},\"\"),iifNull({provider business mailing address postal code},\"\"),iifNull({provider business mailing address state name},\"\")))) ~> AddtlColumns\nIdentifyPrimaryTaxonomy select(mapColumn(\n\t\ttemp_npi = npi,\n\t\t{healthcare provider primary taxonomy code} = healthcare_provider_taxonomy_code,\n\t\t{healthcare provider primary group taxonomy} = healthcare_provider_group_taxonomy,\n\t\t{provider primary license number} = provider_license_number,\n\t\t{provider primary license number state code} = provider_license_number_state_code,\n\t\tprimary_taxonomy_grouping = taxonomy_grouping,\n\t\tprimary_taxonomy_classification = taxonomy_classification,\n\t\tprimary_taxonomy_specialization = taxonomy_specialization\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nAppendPrimaryTaxonomy select(mapColumn(\n\t\teach(match(upper(name)!='TEMP_NPI'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nCreateStateCorrectionKey select(mapColumn(\n\t\tcorrected_state,\n\t\tstate_correction_key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nAddtlColumns, Select5 lookup(business_practice_address_state_correct_key == state_correction_key,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCorrectedStatePracAddr\nLookupCorrectedCountryPracAddr derive({provider business practice location address state name} = iif(isNull(corrected_state), {provider business practice location address state name}, corrected_state),\n\t\t{provider business practice location address country code out us} = iif(isNull(corrected_country), {provider business practice location address country code out us}, corrected_country)) ~> DerivedColumn1\nLookupCorrectedStatePracAddr, Select6 lookup(business_practice_address_country_correct_key == country_correction_key,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCorrectedCountryPracAddr\nCreateCountrycorrectionKey select(mapColumn(\n\t\tcorrected_country,\n\t\tcountry_correction_key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nDerivedColumn1 select(mapColumn(\n\t\teach(match(!in(['business_practice_address_state_correct_key','state_correction_key','corrected_state','business_practice_address_country_correct_key','country_correction_key','corrected_country'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nSelect7, Select5 lookup(business_mailing_address_state_correct_key == state_correction_key,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCorrrectedStateMailAddr\nLookupCorrrectedStateMailAddr, Select6 lookup(business_mailing_address_country_correct_key == country_correction_key,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCorrectedCountryMailAddr\nLookupCorrectedCountryMailAddr derive({provider business mailing address state name} = iif(isNull(corrected_state), {provider business mailing address state name}, corrected_state),\n\t\t{provider business mailing address country code (if outside u.s.) } = iif(isNull(corrected_country), {provider business mailing address country code (if outside u.s.) }, corrected_country)) ~> DerivedColumn2\nDerivedColumn2 select(mapColumn(\n\t\teach(match(!in(['business_mailing_address_state_correct_key','state_correction_key','corrected_state','business_mailing_address_country_correct_key','country_correction_key','corrected_country'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nNPPESProviderMain select(mapColumn(\n\t\teach(match(!startsWith(upper(name),'HEALTHCARE PROVIDER TAXONOMY CODE_')&&!startsWith(upper(name),'PROVIDER LICENSE NUMBER_')&&!startsWith(upper(name),'PROVIDER LICENSE NUMBER STATE CODE_')&&!startsWith(upper(name),'HEALTHCARE PROVIDER PRIMARY TAXONOMY SWITCH_')&&!startsWith(upper(name),'HEALTHCARE PROVIDER TAXONOMY GROUP_')))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select9\nStageProviderTaxonomy aggregate(groupBy(current_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\t{healthcare provider primary taxonomy switch},\n\t\t{healthcare provider taxonomy code},\n\t\t{healthcare provider taxonomy group},\n\t\t{provider license number},\n\t\t{provider license number state code}),\n\tposition = min(position)) ~> Aggregate1\nSelect1 select(mapColumn(\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\thealthcare_provider_primary_taxonomy_switch,\n\t\thealthcare_provider_taxonomy_code,\n\t\thealthcare_provider_group_taxonomy,\n\t\tprovider_license_number,\n\t\tprovider_license_number_state_code,\n\t\ttaxonomy_grouping,\n\t\ttaxonomy_classification,\n\t\ttaxonomy_specialization,\n\t\tcurrent_flag\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select10\nStageOtherProvID aggregate(groupBy(current_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\t{other provider identifier},\n\t\t{other provider identifier type code},\n\t\t{other provider identifier state},\n\t\t{other provider identifier issuer}),\n\ttemp = count(npi)) ~> Aggregate2\nAggregate2 select(mapColumn(\n\t\tcurrent_flag,\n\t\tdata_month,\n\t\tnpi,\n\t\t{entity type code},\n\t\t{entity type},\n\t\t{active flag},\n\t\t{other provider identifier},\n\t\t{other provider identifier state},\n\t\t{other provider identifier issuer},\n\t\t{other provider identifier type code}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select11\nInputStateCorrection derive(state_correction_key = upper(concat(npi,iifNull(address_line_1,\"\"),iifNull(address_line_2,\"\"),iifNull(city,\"\"),iifNull(postal_code,\"\")))) ~> CreateStateCorrectionKey\nInputCountryCorrection derive(country_correction_key = upper(concat(npi,iifNull(address_line_1,\"\"),iifNull(address_line_2,\"\"),iifNull(city,\"\"),iifNull(postal_code,\"\"),iifNull(state, \"\")))) ~> CreateCountrycorrectionKey\nSelect10 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\thealthcare_provider_primary_taxonomy_switch as string,\n\t\thealthcare_provider_taxonomy_code as string,\n\t\thealthcare_provider_group_taxonomy as string,\n\t\tprovider_license_number as string,\n\t\tprovider_license_number_state_code as string,\n\t\ttaxonomy_grouping as string,\n\t\ttaxonomy_classification as string,\n\t\ttaxonomy_specialization as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nSelect8 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcurrent_flag as string,\n\t\tnpi as string,\n\t\tdata_month as integer,\n\t\t{active flag} as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{replacement npi} as string,\n\t\t{employer identification number (ein)} as string,\n\t\t{provider organization name (legal business name)} as string,\n\t\t{provider last name (legal name)} as string,\n\t\t{provider first name} as string,\n\t\t{provider middle name} as string,\n\t\t{provider name prefix text} as string,\n\t\t{provider name suffix text} as string,\n\t\t{provider credential text} as string,\n\t\t{provider other organization name} as string,\n\t\t{provider other organization name type code} as string,\n\t\t{provider other last name} as string,\n\t\t{provider other first name} as string,\n\t\t{provider other middle name} as string,\n\t\t{provider other name prefix text} as string,\n\t\t{provider other name suffix text} as string,\n\t\t{provider other credential text} as string,\n\t\t{provider other last name type code} as string,\n\t\t{provider first line business mailing address} as string,\n\t\t{provider second line business mailing address} as string,\n\t\t{provider business mailing address city name} as string,\n\t\t{provider business mailing address state name} as string,\n\t\t{provider business mailing address postal code} as string,\n\t\t{provider business mailing address country code (if outside u.s.) } as string,\n\t\t{provider business mailing address telephone number} as string,\n\t\t{provider business mailing address fax number} as string,\n\t\t{provider first line business practice location address} as string,\n\t\t{provider second line business practice location address} as string,\n\t\t{provider business practice location address city name} as string,\n\t\t{provider business practice location address state name} as string,\n\t\t{provider business practice location address postal code} as string,\n\t\t{provider business practice location address country code out us} as string,\n\t\t{provider business practice location address telephone number} as string,\n\t\t{provider business practice location address fax number} as string,\n\t\t{provider enumeration date} as date,\n\t\t{last update date} as date,\n\t\t{npi deactivation reason code} as string,\n\t\t{npi deactivation date} as date,\n\t\t{npi reactivation date} as date,\n\t\t{provider gender code} as string,\n\t\t{authorized official last name} as string,\n\t\t{authorized official first name} as string,\n\t\t{authorized official middle name} as string,\n\t\t{authorized official title or position} as string,\n\t\t{authorized official telephone number} as string,\n\t\t{is sole proprietor} as string,\n\t\t{is organization subpart} as string,\n\t\t{parent organization lbn} as string,\n\t\t{parent organization tin} as string,\n\t\t{authorized official name prefix text} as string,\n\t\t{authorized official name suffix text} as string,\n\t\t{authorized official credential text} as string,\n\t\t{healthcare provider primary taxonomy code} as string,\n\t\t{healthcare provider primary group taxonomy} as string,\n\t\t{provider primary license number} as string,\n\t\t{provider primary license number state code} as string,\n\t\tprimary_taxonomy_grouping as string,\n\t\tprimary_taxonomy_classification as string,\n\t\tprimary_taxonomy_specialization as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> LoadNPPESMainStage2a\nSelect11 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcurrent_flag as string,\n\t\tdata_month as integer,\n\t\tnpi as string,\n\t\t{entity type code} as string,\n\t\t{entity type} as string,\n\t\t{active flag} as string,\n\t\t{other provider identifier} as string,\n\t\t{other provider identifier state} as string,\n\t\t{other provider identifier issuer} as string,\n\t\t{other provider identifier type code} as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkStNPPESProvOtherID\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> testCorrectedCountryPractice\nDerivedColumn2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> testCorrectedCountryMailing"
		}
	}
}