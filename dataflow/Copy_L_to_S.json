{
	"name": "Copy_L_to_S",
	"properties": {
		"folder": {
			"name": "AM_test"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Azure_Qral_Dev_Table",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "dqm_exception_detail",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Azure_Qral_Dev_Table",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Filter1"
				}
			],
			"script": "parameters{\n\tl_table_name as string,\n\tl_schema_name as string,\n\ts_schema_name as string,\n\ts_table_name as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource(output(\n\t\tqc_id as integer,\n\t\tpipeline_name as string,\n\t\tpipeline_run_id as string,\n\t\tpipeline_trigger_time as timestamp,\n\t\tpkey_column_values as string,\n\t\tcolumn_metric_error_values as string,\n\t\ttable_name as string,\n\t\talert_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: '\\nselect a.*, b.table_name, b.alert_code from [dqm].[qc_exception_detail] a\\ninner join (select distinct qc_id,table_name, alert_code from [dqm].[qc_list]) b\\non a.qc_id = b.qc_id',\n\tformat: 'query') ~> source2\nsource2 filter(and(table_name == $l_table_name, alert_code = 'Y')) ~> Filter1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
		}
	}
}